// Generated by CoffeeScript 1.9.1

/*

LIBRARY
 */
var ABCContainer, Actions, Behaviors, ButtonContainer, ChooseContainer, CloneCompleterContainer, CloneContainer, Component, ComponentGroup, ComponentObserver, CrossWordsContainer, DragContainer, Evaluator, Game, GameObserver, GridContainer, ImageCompleterContainer, ImageContainer, ImageWordCompleterContainer, Instructions, LabelContainer, LetterContainer, LetterDragContainer, MainContainer, Methods, Mobile, Module, Observer, Oda, PhraseCloneContainer, PhraseCompleterContainer, Preloader, Scene, SceneFactory, SceneObserver, SceneStack, Score, ScrambledWordContainer, SpriteContainer, StepContainer, StepsContainer, TextCloneContainer, TextCompleterContainer, TextContainer, Utilities, WordCompleterContainer, WordSearchContainer, WriteContainer, base, base1, base2, base3, base4, base5, base6, moduleKeywords,
  slice = [].slice,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

if (window.dealersjs == null) {
  window.dealersjs = {};
}

if (window.d2oda == null) {
  window.d2oda = {};
}

if (window.lib == null) {
  window.lib = {};
}

if ((base = window.dealersjs).mobile == null) {
  base.mobile = Mobile = (function() {
    function Mobile() {}

    Mobile.user_agent = navigator.userAgent.toLowerCase();

    Mobile.isIOS = function() {
      if (true === this.isIpad() || true === this.isIphone() || true === this.isIpod()) {
        return true;
      } else {
        return false;
      }
    };

    Mobile.isIpad = function() {
      return this.user_agent.indexOf('ipad') > -1;
    };

    Mobile.isIphone = function() {
      return this.user_agent.indexOf('iphone') > -1;
    };

    Mobile.isIpod = function() {
      return this.user_agent.indexOf('ipod') > -1;
    };

    Mobile.isAndroid = function() {
      return this.user_agent.indexOf('android') > -1;
    };

    Mobile.isMobile = function() {
      return this.user_agent.indexOf('mobile') > -1;
    };

    Mobile;

    return Mobile;

  })();
}

if ((base1 = window.d2oda).utilities == null) {
  base1.utilities = Utilities = (function() {
    function Utilities() {}

    Utilities.shuffleNoRepeat = function(a, len) {
      var copy, i, l, rand, ref, shuffle;
      copy = a.slice(0);
      shuffle = Array();
      for (i = l = 1, ref = len; 1 <= ref ? l <= ref : l >= ref; i = 1 <= ref ? ++l : --l) {
        rand = Math.round(Math.random() * (copy.length - 1));
        shuffle.push(copy[rand]);
        copy.splice(rand, 1);
      }
      return shuffle;
    };

    Utilities.shuffle = function(a) {
      var copy, i, j, l, ref, ref1;
      copy = a.slice(0);
      for (i = l = ref = copy.length - 1; ref <= 0 ? l <= 0 : l >= 0; i = ref <= 0 ? ++l : --l) {
        j = Math.floor(Math.random() * (i + 1));
        ref1 = [copy[j], copy[i]], copy[i] = ref1[0], copy[j] = ref1[1];
      }
      return copy;
    };

    Utilities.clone = function(obj) {
      var flags, key, newInstance;
      if ((obj == null) || typeof obj !== 'object') {
        return obj;
      }
      if (obj instanceof Date) {
        return new Date(obj.getTime());
      }
      if (obj instanceof RegExp) {
        flags = '';
        if (obj.global != null) {
          flags += 'g';
        }
        if (obj.ignoreCase != null) {
          flags += 'i';
        }
        if (obj.multiline != null) {
          flags += 'm';
        }
        if (obj.sticky != null) {
          flags += 'y';
        }
        return new RegExp(obj.source, flags);
      }
      newInstance = new obj.constructor();
      for (key in obj) {
        newInstance[key] = this.clone(obj[key]);
      }
      return newInstance;
    };

    Utilities.isArray = function(value) {
      Array.isArray(value || function(value) {});
      return {}.toString.call(value) === '[object Array]';
    };

    Utilities;

    return Utilities;

  })();
}

if ((base2 = window.d2oda).behaviors == null) {
  base2.behaviors = Behaviors = (function() {
    function Behaviors() {}

    Behaviors.initDragListener = function() {
      return Behaviors.on('mousedown', Behaviors.handleMouseDown);
    };

    Behaviors.endDragListener = function() {
      return Behaviors.off('mousedown', Behaviors.handleMouseDown);
    };

    Behaviors;

    return Behaviors;

  })();
}

if ((base3 = window.d2oda).actions == null) {
  base3.actions = Actions = (function() {
    function Actions() {}

    Actions.fadeOut = function(ignoreY, ignoreCurrentAlpha) {
      if (ignoreY == null) {
        ignoreY = false;
      }
      if (ignoreCurrentAlpha == null) {
        ignoreCurrentAlpha = false;
      }
      TweenMax.killTweensOf(this);
      TweenLite.killTweensOf(this);
      if (this.alpha === 0 && ignoreCurrentAlpha === false) {
        if (ignoreY) {
          return TweenLite.from(this, 0.5, {
            alpha: 1
          });
        } else {
          this.y -= 20;
          return TweenLite.from(this, 0.5, {
            alpha: 1,
            y: this.y + 20
          });
        }
      } else {
        if (ignoreY) {
          return TweenLite.to(this, 0.5, {
            alpha: 0
          });
        } else {
          this.y += 20;
          return TweenLite.to(this, 0.5, {
            alpha: 0,
            y: this.y - 20
          });
        }
      }
    };

    Actions.fadeIn = function(ignoreY, ignoreCurrentAlpha) {
      if (ignoreY == null) {
        ignoreY = false;
      }
      if (ignoreCurrentAlpha == null) {
        ignoreCurrentAlpha = false;
      }
      TweenMax.killTweensOf(this);
      TweenLite.killTweensOf(this);
      if (this.alpha === 1 && ignoreCurrentAlpha === false) {
        if (ignoreY) {
          return TweenLite.from(this, 0.5, {
            alpha: 0
          });
        } else {
          this.y -= 20;
          return TweenLite.from(this, 0.5, {
            alpha: 0,
            y: this.y + 20
          });
        }
      } else {
        if (ignoreY) {
          return TweenLite.to(this, 0.5, {
            alpha: 1
          });
        } else {
          this.y += 20;
          return TweenLite.to(this, 0.5, {
            alpha: 1,
            y: this.y - 20
          });
        }
      }
    };

    Actions.pulse = function(state) {
      if (state == null) {
        state = true;
      }
      TweenMax.killTweensOf(this);
      TweenLite.killTweensOf(this);
      this.alpha = 1;
      if (state) {
        return TweenMax.to(this, 0.5, {
          scaleX: 0.8,
          scaleY: 0.8,
          repeat: -1,
          yoyo: true
        });
      }
    };

    Actions.blink = function(state) {
      if (state == null) {
        state = true;
      }
      TweenMax.killTweensOf(this);
      TweenLite.killTweensOf(this);
      this.alpha = 1;
      if (state) {
        return TweenMax.to(this, 0.5, {
          alpha: 0.2,
          repeat: -1,
          yoyo: true
        });
      }
    };

    Actions.hide = function() {
      return this.visible = false;
    };

    Actions.setInOrigin = function() {
      this.x = this.pos.x;
      return this.y = this.pos.y;
    };

    Actions.putInPlace = function(position, alpha, scaleX, scaleY) {
      if (alpha == null) {
        alpha = 1;
      }
      if (scaleX == null) {
        scaleX = 1;
      }
      if (scaleY == null) {
        scaleY = 1;
      }
      TweenMax.killTweensOf(this);
      TweenLite.killTweensOf(this);
      return TweenLite.to(this, 1, {
        ease: Back.easeOut,
        delay: 0.1,
        x: position.x,
        y: position.y,
        alpha: alpha,
        scaleX: scaleX,
        scaleY: scaleY
      });
    };

    Actions.returnToPlace = function(alpha, scaleX, scaleY) {
      if (alpha == null) {
        alpha = 1;
      }
      if (scaleX == null) {
        scaleX = 1;
      }
      if (scaleY == null) {
        scaleY = 1;
      }
      TweenMax.killTweensOf(this);
      TweenLite.killTweensOf(this);
      return TweenLite.to(this, 0.5, {
        ease: Back.easeOut,
        delay: 0.1,
        x: this.pos.x,
        y: this.pos.y,
        alpha: alpha,
        scaleX: scaleX,
        scaleY: scaleY
      });
    };

    Actions;

    return Actions;

  })();
}

if ((base4 = window.d2oda).methods == null) {
  base4.methods = Methods = (function() {
    function Methods() {}

    Methods.createBitmap = function(name, id, x, y, position) {
      var bmp, cont, img;
      if (position == null) {
        position = 'tl';
      }
      img = lib.preloader.preload.getResult(id);
      cont = new createjs.Container();
      bmp = new createjs.Bitmap(img);
      bmp.mouseEnabled = false;
      cont.hitTester = new createjs.Shape();
      cont.hitTester.graphics.beginFill('rgba(255,255,255,0.01)').drawRect(0, 0, img.width, img.height);
      cont.hitTester.name = "h" + name;
      cont.x = x;
      cont.y = y;
      cont.width = img.width;
      cont.height = img.height;
      cont.name = name;
      cont.mouseChildren = false;
      cont.addChild(bmp, cont.hitTester);
      this.setPosition(position, cont);
      return cont;

      /*
      		img = lib.preloader.preload.getResult id
      		bmp = new createjs.Bitmap img
      		bmp.x = x
      		bmp.y = y
      		bmp.width = img.width
      		bmp.height = img.height
      		bmp.name = name
      		@setPosition position, bmp
      		bmp
       */
    };

    Methods.insertBitmap = function(name, id, x, y, position) {
      var bmp;
      if (position == null) {
        position = 'tl';
      }
      bmp = this.createBitmap(name, id, x, y, position);
      this.add(bmp);
      return bmp;
    };

    Methods.createText = function(name, t, f, c, x, y, align) {
      var text;
      if (align == null) {
        align = 'left';
      }
      text = new createjs.Text(t, f, c);
      text.name = name;
      text.x = x;
      text.y = y;
      text.textAlign = align;
      return text;
    };

    Methods.insertText = function(name, t, f, c, x, y, align) {
      var text;
      if (align == null) {
        align = 'left';
      }
      text = this.createText(name, t, f, c, x, y, align);
      this.add(text);
      return text;
    };

    Methods.createSprite = function(name, imgs, anim, x, y, position) {
      var cont, h, img, sprite, spriteImgs, w;
      if (anim == null) {
        anim = null;
      }
      if (position == null) {
        position = 'tl';
      }
      spriteImgs = (function() {
        var l, len1, results;
        results = [];
        for (l = 0, len1 = imgs.length; l < len1; l++) {
          img = imgs[l];
          results.push(lib.preloader.preload.getResult(img));
        }
        return results;
      })();
      cont = new createjs.Container();
      w = spriteImgs[0].width;
      h = spriteImgs[0].height;
      sprite = new createjs.SpriteSheet({
        images: spriteImgs,
        animations: anim,
        frames: {
          width: w,
          height: h
        }
      });
      cont.animation = new createjs.Sprite(sprite);
      cont.animation.mouseEnabled = false;
      cont.animation.currentFrame = 0;
      cont.hitTester = new createjs.Shape();
      cont.hitTester.graphics.beginFill('rgba(255,255,255,0.01)').drawRect(0, 0, w, h);
      cont.hitTester.name = "h" + name;
      cont.x = x;
      cont.y = y;
      cont.width = w;
      cont.height = h;
      cont.name = name;
      cont.mouseChildren = false;
      cont.addChild(cont.animation, cont.hitTester);
      this.setPosition(position, cont);
      return cont;
    };

    Methods.insertSprite = function(name, imgs, anim, x, y, position) {
      var animation;
      if (anim == null) {
        anim = null;
      }
      if (position == null) {
        position = 'tl';
      }
      animation = this.createSprite(name, imgs, anim, x, y, position);
      this.add(animation);
      return animation;
    };

    Methods.setPosition = function(position, obj) {
      if (obj == null) {
        obj = null;
      }
      if (!obj) {
        obj = this;
      }
      switch (position) {
        case 'tc':
          return this.setReg(obj, obj.width / 2, 0);
        case 'tr':
          return this.setReg(obj, obj.width, 0);
        case 'ml':
          return this.setReg(obj, 0, obj.height / 2);
        case 'mc':
          return this.setReg(obj, obj.width / 2, obj.height / 2);
        case 'mr':
          return this.setReg(obj, obj.width, obj.height / 2);
        case 'bl':
          return this.setReg(obj, 0, obj.height);
        case 'bc':
          return this.setReg(obj, obj.width / 2, obj.height);
        case 'br':
          return this.setReg(obj, obj.width, obj.height);
        default:
          return this.setReg(obj, 0, 0);
      }
    };

    Methods.setReg = function(obj, regX, regY) {
      obj.regX = regX;
      obj.regY = regY;
      return obj;
    };

    Methods.add = function(child, toLibrary) {
      if (toLibrary == null) {
        toLibrary = true;
      }
      this.addChild(child);
      if (toLibrary) {
        return lib[child.name] = child;
      }
    };

    Methods.delay = function() {
      var args, fn, time;
      time = arguments[0], fn = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      return setTimeout.apply(null, [fn, time].concat(slice.call(args)));
    };

    Methods;

    return Methods;

  })();
}

if ((base5 = window.d2oda).stage == null) {
  base5.stage = {
    w: 800,
    h: 600,
    r: 1
  };
}

if ((base6 = window.d2oda).evaluator == null) {
  base6.evaluator = Evaluator = (function() {
    function Evaluator() {}

    Evaluator.success = null;

    Evaluator.total = 0;

    Evaluator.total_index = 0;

    Evaluator.evaluate = function(type, dispatcher, target) {
      console.log(type, dispatcher, target);
      if (type instanceof Function) {
        type(dispatcher, target);
        return;
      }
      switch (type) {
        case 'repeat':
          return this.evaluateRepeat();
        case 'finish':
          return this.evaluateFinish(target);
        case 'global_01':
          return this.evaluateGlobal01(dispatcher);
        case 'click_O1':
          return this.evaluateClick01(dispatcher, target);
        case 'click_O1_01':
          return this.evaluateClick01_01(dispatcher, target);
        case 'click_02':
          return this.evaluateClick02(dispatcher, target);
        case 'click_03':
          return this.evaluateClick03(dispatcher, target);
        case 'drop_01':
          return this.evaluateDrop01(dispatcher, target);
        case 'drop_02':
          return this.evaluateDrop02(dispatcher, target);
        case 'drop_02_01':
          return this.evaluateDrop02_01(dispatcher, target);
        case 'drop_02_02':
          return this.evaluateDrop02_02(dispatcher, target);
        case 'drop_03':
          return this.evaluateDrop03(dispatcher, target);
        case 'drop_04':
          return this.evaluateDrop04(dispatcher, target);
        case 'clon_01':
          return this.evaluateClon01(dispatcher, target);
        case 'switch_01':
          return this.evaluateSwitch01(dispatcher, target);
        case 'choose_01':
          return this.evaluateChoose01(dispatcher);
        case 'show_choose_01':
          return this.evaluateShowChoose01(dispatcher, target);
        case 'hangman_click_01':
          return this.evaluateHangmanClick01(dispatcher, target);
        case 'show_click_01':
          return this.evaluateShowClick01(dispatcher, target);
        case 'phrase_drop_01':
          return this.evaluatePhraseDrop01(dispatcher, target);
        case 'phrase_drop_02':
          return this.evaluatePhraseDrop02(dispatcher, target);
        case 'phrase_drop_03':
          return this.evaluatePhraseDrop03(dispatcher, target);
        case 'sprite_drop_01':
          return this.evaluateSpriteDrop01(dispatcher, target);
        case 'word_drop_01':
          return this.evaluateWordDrop01(dispatcher, target);
        case 'word_complete_01':
          return this.evaluateWordComplete01(dispatcher, target);
      }
    };

    Evaluator.evaluateRepeat = function() {
      createjs.Sound.stop();
      return createjs.Sound.play(lib.scene.snd);
    };

    Evaluator.evaluateFinish = function(target) {
      var drop, l, len1, len2, m, ref, ref1, tgt;
      if (lib[target].droptargets) {
        ref = lib[target].droptargets;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          drop = ref[l];
          drop.showEvaluation();
          if (drop.complete) {
            lib.score.plusOne();
          }
        }
      } else if (lib[target].group) {
        ref1 = lib[target].group;
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          tgt = ref1[m];
          if (lib[tgt].showEvaluation) {
            lib[tgt].showEvaluation();
          }
          if (lib[tgt].complete) {
            lib.score.plusOne();
          }
        }
      }
      return lib.scene.success(false);
    };

    Evaluator.evaluateGlobal01 = function(dispatcher) {
      if (lib[dispatcher].index === this.success) {
        return lib.scene.success();
      } else {
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateGlobal02 = function(dispatcher) {
      if (lib[dispatcher].index === this.success) {
        lib.scene.success();
        return lib.scene.nextStep();
      } else {
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateHangmanClick01 = function(dispatcher, target) {
      var complete, droptarget, failed, l, len1, len2, m, ref, ref1;
      failed = true;
      lib[dispatcher].visible = false;
      ref = lib[target].droptargets;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        droptarget = ref[l];
        if (lib[dispatcher].index === droptarget.success) {
          droptarget.update({
            complete: true
          });
          failed = false;
        }
      }
      if (failed) {
        lib.scene.fail();
        lib.hangman.current++;
        if (lib.hangman.current >= lib.hangman.group.length) {
          lib.hangman.current = 0;
          lib.scene.nextStep();
        } else {
          lib.hangman.update({
            type: 'fadeIn',
            target: lib.hangman.group[lib.hangman.current]
          });
        }
      } else {
        complete = true;
        ref1 = lib[target].droptargets;
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          droptarget = ref1[m];
          if (!droptarget.complete) {
            complete = false;
          }
        }
      }
      if (complete) {
        lib.hangman.current = 0;
        return lib.scene.success();
      }
    };

    Evaluator.evaluateShowClick01 = function(dispatcher, target) {
      return lib[target].update({
        type: 'fadeIn',
        target: lib[dispatcher].index
      });
    };

    Evaluator.evaluateWordDrop01 = function(dispatcher, target) {
      if (lib[dispatcher].index === target.success) {
        target.complete = true;
        target.update();
        lib[dispatcher].afterSuccess();
        target.parent.currentTarget++;
        if (target.parent.currentTarget === target.parent.droptargets.length) {
          lib[target.parent.target][target.parent.fx]();
          lib.scene.success();
          return target.parent.onComplete();
        }
      } else {
        lib[dispatcher].afterFail();
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateWordComplete01 = function(dispatcher, target) {
      var index;
      index = lib[dispatcher].oncomplete.index;
      return lib[target].words[index].enabled = true;
    };

    Evaluator.evaluateClick01 = function(dispatcher, target) {
      var answer, currentTarget, droptargets;
      answer = lib[dispatcher].index;
      droptargets = lib[target].droptargets;
      currentTarget = lib[target].currentTarget;
      if (answer === droptargets[currentTarget].success) {
        droptargets[currentTarget].complete = true;
        droptargets[currentTarget].update();
        lib[target].currentTarget++;
        createjs.Sound.play('s/good');
        if (lib[target].currentTarget === droptargets.length) {
          return lib.scene.success();
        }
      } else {
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateClick01_01 = function(dispatcher, target) {
      var answer, currentTarget, droptargets, next;
      answer = lib[dispatcher].index;
      droptargets = lib[target].droptargets;
      currentTarget = lib[target].currentTarget;
      if (answer === droptargets[currentTarget].success) {
        droptargets[currentTarget].complete = true;
        droptargets[currentTarget].update();
        lib[target].currentTarget++;
        if (lib[target].currentTarget === droptargets.length) {
          next = lib[target].nextGroup;
          lib.score.plusOne();
          createjs.Sound.play('s/good');
          return lib[next].setInvisible(false);
        }
      } else {
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateClick02 = function(dispatcher, target) {
      if (lib[dispatcher].index === lib[target].success) {
        lib[target].complete = true;
        lib[dispatcher].updateState();
        return lib.scene.success();
      } else {
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateClick03 = function(dispatcher, target) {
      var currentTarget, targets;
      targets = lib[target].targets;
      currentTarget = lib[target].currentTarget;
      if (lib[dispatcher].index === lib[target].success) {
        targets[currentTarget].complete = true;
        lib[target].fadeOut(targets[currentTarget]);
        lib.scene.success(false);
        createjs.Sound.play('s/good');
        return lib[target].currentTarget++;
      } else {
        lib[target].warnings++;
        lib.scene.fail();
        if (lib[target].warnings === 3) {
          lib.score.stop();
          return lib.game.nextScene();
        }
      }
    };

    Evaluator.evaluateDrop01 = function(dispatcher, target) {
      lib[dispatcher].afterSuccess({
        x: target.x,
        y: target.y
      });
      if (lib[dispatcher].index === target.success) {
        return target.update();
      } else {
        return target.update(false);
      }
    };

    Evaluator.evaluateDrop02 = function(dispatcher, target) {
      if (lib[dispatcher].index === target.success) {
        target.complete = true;
        target.update();
        lib[dispatcher].afterSuccess();
        return lib.scene.success();
      } else {
        lib[dispatcher].afterFail();
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateDrop02_01 = function(dispatcher, target) {
      var complete, drop, l, len1, len2, m, ref, ref1;
      complete = true;
      if (lib[dispatcher].index === target.success) {
        target.update(lib[dispatcher].label.text, true);
      } else {
        target.update(lib[dispatcher].label.text, false);
      }
      lib[dispatcher].afterSuccess();
      ref = lib[dispatcher].droptargets;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        drop = ref[l];
        if (drop.text.text === '') {
          complete = false;
        }
      }
      if (!complete) {
        return;
      }
      ref1 = lib[dispatcher].droptargets;
      for (m = 0, len2 = ref1.length; m < len2; m++) {
        drop = ref1[m];
        drop.showEvaluation();
        if (drop.complete) {
          lib.score.plusOne();
        }
      }
      return lib.scene.success(false);
    };

    Evaluator.evaluateDrop02_02 = function(dispatcher, target) {
      if (lib[dispatcher].index === target.success) {
        target.update({
          complete: true
        });
        lib[dispatcher].afterSuccess();
        return lib.scene.success();
      } else {
        lib[dispatcher].afterFail();
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateDrop03 = function(dispatcher, target) {
      if (lib[dispatcher].index === target.success) {
        target.complete = true;
        target.update();
        lib[dispatcher].afterSuccess();
        target.parent.currentTarget++;
        if (target.parent.currentTarget === target.parent.droptargets.length) {
          lib[target.parent.target].fadeOut();
          return lib.scene.success();
        }
      } else {
        lib[dispatcher].afterFail();
        return lib.scene.fail();
      }
    };

    Evaluator.evaluatePhraseDrop01 = function(dispatcher, target) {
      if (lib[dispatcher].index === target.success) {
        target.complete = true;
        target.update();
        lib[dispatcher].afterSuccess();
        target.parent.currentTarget++;
        lib.score.plusOne();
        createjs.Sound.play('s/good');
        if (target.parent.currentTarget === target.parent.droptargets.length) {
          return lib.scene.success(false);
        }
      } else {
        lib[dispatcher].afterFail();
        return lib.scene.fail();
      }
    };

    Evaluator.evaluatePhraseDrop02 = function(dispatcher, target) {
      if (lib[dispatcher].index === target.success) {
        target.complete = true;
        target.update();
        lib[dispatcher].afterSuccess();
        target.parent.currentTarget++;
        if (target.parent.currentTarget === target.parent.droptargets.length) {
          return lib.scene.success();
        }
      } else {
        lib[dispatcher].afterFail();
        return lib.scene.fail();
      }
    };

    Evaluator.evaluatePhraseDrop03 = function(dispatcher, target) {
      if (lib[dispatcher].index === target.success) {
        target.complete = true;
        target.update();
        lib[dispatcher].afterSuccess();
        target.parent.currentTarget++;
        if (target.parent.currentTarget === target.parent.droptargets.length) {
          target.parent.fadeOut();
          target.parent.hideLabel();
          return lib.scene.success();
        }
      } else {
        lib[dispatcher].afterFail();
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateSpriteDrop01 = function(dispatcher, target) {
      if (lib[dispatcher].index === target.parent.success) {
        console.log(target.parent, target.parent.nextStep);
        target.parent.nextStep();
        lib[dispatcher].afterSuccess();
        return lib.scene.success(true, false);
      } else {
        lib[dispatcher].afterFail();
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateDrop04 = function(dispatcher, target) {
      if (lib[dispatcher].index === target.success) {
        target.update({
          complete: true
        });
        lib[dispatcher].afterSuccess();
        return target.parent.evaluateWords();
      } else {
        lib[dispatcher].afterFail();
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateClon01 = function(dispatcher, target) {
      if (lib[dispatcher].index === target.success) {
        target.update(true, lib[dispatcher].bmpid);
      } else {
        target.update(false, lib[dispatcher].bmpid);
      }
      return lib[dispatcher].afterSuccess();
    };

    Evaluator.evaluateSwitch01 = function(dispatcher, target) {
      if (lib[dispatcher].index === lib[target].success) {
        lib[target].doSwitch();
        return lib.scene.success();
      } else {
        return lib.scene.fail();
      }
    };

    Evaluator.evaluateShowChoose01 = function(dispatcher, target) {
      var g, i, index, l, len1, results, scaleY, t;
      TweenMax.killTweensOf(lib[dispatcher]);
      TweenLite.killTweensOf(lib[dispatcher]);
      lib[dispatcher].alpha = 1;
      lib[dispatcher].scaleX = scaleY = 1;
      index = lib[dispatcher].index - 1;
      if (d2oda.utilities.isArray(target)) {
        results = [];
        for (l = 0, len1 = target.length; l < len1; l++) {
          t = target[l];
          i = lib[t].group[index];
          results.push(g = lib[t].update({
            type: 'fadeIn',
            target: i
          }));
        }
        return results;
      }
    };

    Evaluator.evaluateChoose01 = function(dispatcher) {
      lib.scene.choose = lib[dispatcher].index;
      return lib.scene.success(false);
    };

    Evaluator;

    return Evaluator;

  })();
}

Array.prototype.toDictionary = function(key) {
  var dict, l, len1, obj;
  dict = {};
  for (l = 0, len1 = this.length; l < len1; l++) {
    obj = this[l];
    if (obj[key] != null) {
      dict[obj[key]] = obj;
    }
  }
  return dict;
};

Array.prototype.where = function(query) {
  var hit;
  if (typeof query !== "object") {
    return [];
  }
  hit = Object.keys(query).length;
  return this.filter(function(item) {
    var key, match, val;
    match = 0;
    for (key in query) {
      val = query[key];
      if (item[key] === val) {
        match += 1;
      }
    }
    if (match === hit) {
      return true;
    } else {
      return false;
    }
  });
};

Array.prototype.unique = function() {
  var key, l, output, ref, results, value;
  output = {};
  for (key = l = 0, ref = this.length; 0 <= ref ? l < ref : l > ref; key = 0 <= ref ? ++l : --l) {
    output[this[key]] = this[key];
  }
  results = [];
  for (key in output) {
    value = output[key];
    results.push(value);
  }
  return results;
};

Array.prototype.compare = function(array) {
  var i;
  i = this.length;
  if (i !== array.length) {
    return false;
  }
  while (i--) {
    if (this[i] !== array[i]) {
      return false;
    }
  }
  return true;
};

Array.prototype.merge = function(other) {
  return Array.prototype.push.apply(this, other);
};


/*

BASE CLASSES
 */

Oda = (function() {
  function Oda() {
    this.playAgain = bind(this.playAgain, this);
    this.handlePlayAgain = bind(this.handlePlayAgain, this);
    this.endGame = bind(this.endGame, this);
    this.initGame = bind(this.initGame, this);
    this.removeMobileInstructions = bind(this.removeMobileInstructions, this);
    this.initMobileInstructions = bind(this.initMobileInstructions, this);
    this.playInstructions = bind(this.playInstructions, this);
    this.setGame = bind(this.setGame, this);
    var assetsurl, def_manifest, item;
    lib.preloader = new Preloader();
    lib.mainContainer = new MainContainer();
    assetsurl = 'assets/';
    def_manifest = [
      {
        id: 'sg',
        src: assetsurl + "start_game.png"
      }, {
        id: 'pa',
        src: assetsurl + "play_again.png"
      }, {
        id: 's/boing',
        src: assetsurl + "boing.mp3"
      }, {
        id: 's/good',
        src: assetsurl + "good.mp3"
      }, {
        id: 's/wrong',
        src: assetsurl + "wrong.mp3"
      }
    ];
    this.manifest = (function() {
      var l, len1, ref, results;
      ref = this.manifest;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        item = ref[l];
        results.push({
          id: "" + item.id,
          src: "" + (assetsurl + item.src)
        });
      }
      return results;
    }).call(this);
    Array.prototype.push.apply(this.manifest, def_manifest);
    this._setStage().resize();
    lib.preloader.addEventListener('complete', this.setGame);
    lib.preloader.load(this.manifest);
  }

  Oda.prototype.resize = function() {
    var h, w;
    w = window.innerWidth;
    h = window.innerHeight;
    d2oda.stage.r = Math.min(w / d2oda.stage.w, h / d2oda.stage.h);
    lib.mainContainer.scaleX = d2oda.stage.r;
    lib.mainContainer.scaleY = d2oda.stage.r;
    $('#oda').width(w);
    this.stage.canvas.width = w;
    this.stage.canvas.height = h;
    lib.mainContainer.x = this.stage.canvas.width / 2;
    lib.mainContainer.y = this.stage.canvas.height / 2;
    return this;
  };

  Oda.prototype.setGame = function() {
    var gameinstance;
    lib.mainContainer.removeAllChildren();
    gameinstance = d2oda.utilities.clone(this.game);
    lib.game = new Game(gameinstance);
    return this.playInstructions();
  };

  Oda.prototype.playInstructions = function() {
    var inst;
    if (dealersjs.mobile.isIOS() || dealersjs.mobile.isAndroid()) {
      lib.mainContainer.insertBitmap('start', 'sg', d2oda.stage.w / 2, d2oda.stage.h / 2, 'mc');
      lib.start.addEventListener('click', this.initMobileInstructions);
      return TweenLite.from(lib.start, 0.3, {
        alpha: 0,
        y: lib.start + 20
      });
    } else {
      inst = lib.instructions.playSound('s/instructions');
      return inst.addEventListener('complete', this.initGame);
    }
  };

  Oda.prototype.initMobileInstructions = function(e) {
    var inst;
    inst = lib.instructions.playSound('s/instructions');
    e.target.removeEventListener('click', this.initMobileInstructions);
    inst.addEventListener('complete', this.initGame);
    return TweenLite.to(lib.start, 0.3, {
      alpha: 0,
      y: lib.start.y + 20,
      onComplete: this.removeMobileInstructions
    });
  };

  Oda.prototype.removeMobileInstructions = function() {
    return lib.mainContainer.removeChild(lib.start);
  };

  Oda.prototype.initGame = function() {
    return lib.game.start();
  };

  Oda.prototype.endGame = function() {
    createjs.Sound.stop();
    lib.mainContainer.insertBitmap('play_again', 'pa', d2oda.stage.w / 2, d2oda.stage.h / 2, 'mc');
    lib.play_again.addEventListener('click', this.handlePlayAgain);
    return TweenLite.from(lib.play_again, 0.5, {
      alpha: 0,
      y: lib.play_again.y - 20
    });
  };

  Oda.prototype.handlePlayAgain = function(e) {
    lib.play_again.removeEventListener('click', this.handlePlayAgain);
    return TweenLite.to(lib.play_again, 0.5, {
      alpha: 0,
      y: lib.play_again.y - 20,
      onComplete: this.playAgain
    });
  };

  Oda.prototype.playAgain = function() {
    return this.setGame();
  };

  Oda.prototype.tick = function() {
    return this.stage.update();
  };

  Oda.prototype._setStage = function() {
    this.stage = new createjs.Stage('oda');
    createjs.Ticker.addEventListener('tick', this.stage);
    createjs.Ticker.setFPS(60);
    createjs.Touch.enable(this.stage);
    this.stage.enableMouseOver(50);
    this.stage.addChild(lib.mainContainer);
    lib.preloader.mainContainer = lib.mainContainer;
    return this;
  };

  window.Oda = Oda;

  return Oda;

})();

Preloader = (function() {
  function Preloader() {
    this.handleComplete = bind(this.handleComplete, this);
    this.handleProgress = bind(this.handleProgress, this);
    this.initialize();
  }

  Preloader.prototype = new createjs.EventDispatcher();

  Preloader.prototype.EventDispatcher_initialize = Preloader.prototype.initialize;

  Preloader.prototype.initialize = function() {
    var bgBar, i, l, ref, results;
    this.EventDispatcher_initialize();
    this.preload = new createjs.LoadQueue(false);
    this.loadStep = 0;
    this.barHeight = 7;
    this.barWidth = 35;
    this.loaderColor = (ref = $('#oda').data('loadercolor')) != null ? ref : '#E62922';
    this.loaderBar = new createjs.Container();
    this.loaderBar.x = d2oda.stage.w / 2;
    this.loaderBar.y = d2oda.stage.h / 2;
    results = [];
    for (i = l = 1; l <= 13; i = l += 1) {
      bgBar = new createjs.Shape();
      bgBar.graphics.setStrokeStyle(1).beginStroke(this.loaderColor).beginFill(this.loaderColor).drawRoundRect(0, 0, this.barWidth, this.barHeight, 5);
      bgBar.regX = -20;
      bgBar.regY = this.barHeight / 2;
      bgBar.rotation = (i - 1) * 30;
      bgBar.alpha = 0.05;
      bgBar.name = 'bar' + i.toString();
      results.push(this.loaderBar.addChild(bgBar));
    }
    return results;
  };

  Preloader.prototype.load = function(manifest) {
    this.preload.installPlugin(createjs.Sound);
    this.preload.addEventListener('progress', this.handleProgress);
    this.preload.addEventListener('complete', this.handleComplete);
    this.preload.loadManifest(manifest);
    this.mainContainer.addChild(this.loaderBar);
    TweenLite.from(this.loaderBar, 1, {
      alpha: 0.1,
      ease: Quart.easeOut
    });
    return this;
  };

  Preloader.prototype.handleProgress = function(e) {
    var percent;
    percent = Math.round(this.preload.progress * 100);
    if (e.loaded >= this.loadStep / 12 && this.loadStep < 12) {
      this.showBar("bar" + (this.loadStep + 1));
      return this.loadStep++;
    }
  };

  Preloader.prototype.handleComplete = function() {
    this.preload.removeEventListener('progress', this.handleProgress);
    this.preload.removeEventListener('complete', this.handleComplete);
    this.dispatchEvent({
      type: 'complete'
    });
    return TweenLite.to(this.loaderBar, 1, {
      alpha: 0,
      ease: Quart.easeOut
    });
  };

  Preloader.prototype.showBar = function(name) {
    return TweenLite.to(this.loaderBar.getChildByName(name), 2.5, {
      alpha: 1,
      ease: Quart.easeOut
    });
  };

  window.Preloader = Preloader;

  return Preloader;

})();

moduleKeywords = ['extended', 'included'];

Module = (function() {
  function Module() {}

  Module.extend = function(obj, props) {
    var key, ref, value;
    for (key in props) {
      value = props[key];
      if (indexOf.call(moduleKeywords, key) < 0) {
        obj[key] = value;
      }
    }
    if ((ref = props.extended) != null) {
      ref.apply(obj);
    }
    return obj;
  };

  Module.include = function(obj, props) {
    var key, ref, value;
    for (key in props) {
      value = props[key];
      if (indexOf.call(moduleKeywords, key) < 0) {
        obj.prototype[key] = value;
      }
    }
    if ((ref = props.included) != null) {
      ref.apply(obj);
    }
    return obj;
  };

  window.Module = Module;

  return Module;

})();

MainContainer = (function() {
  function MainContainer() {
    this.warningComplete = bind(this.warningComplete, this);
    this.initialize();
  }

  MainContainer.prototype = new createjs.Container();

  MainContainer.prototype.Container_initialize = MainContainer.prototype.initialize;

  MainContainer.prototype.initialize = function() {
    Module.extend(this, d2oda.methods);
    this.Container_initialize();
    this.name = 'mainContainer';
    this.regX = d2oda.stage.w / 2;
    return this.regY = d2oda.stage.h / 2;
  };

  MainContainer.prototype.warning = function() {
    createjs.Sound.play('s/wrong');
    this.prevX = this.x;
    TweenMax.to(this, 0.1, {
      x: this.x + 10,
      repeat: 6,
      yoyo: true,
      onComplete: this.warningComplete
    });
    return this;
  };

  MainContainer.prototype.warningComplete = function() {
    return this.x = this.prevX;
  };

  window.MainContainer = MainContainer;

  return MainContainer;

})();

Observer = (function() {
  function Observer() {
    this.subscribers = [];
  }

  Observer.prototype.notify = function(item) {
    var l, len1, ref, results, subscriber;
    ref = this.subscribers;
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      subscriber = ref[l];
      if (subscriber.item === item) {
        results.push(subscriber.callback(item));
      }
    }
    return results;
  };

  Observer.prototype.subscribe = function(to, onNotify) {
    return this.subscribers.push({
      'item': to,
      'callback': onNotify
    });
  };

  return Observer;

})();

GameObserver = (function(superClass) {
  extend(GameObserver, superClass);

  function GameObserver() {
    return GameObserver.__super__.constructor.apply(this, arguments);
  }

  GameObserver.NEXT_SCENE = 'next_scene';

  GameObserver.PREV_SCENE = 'prev_scene';

  GameObserver.START = 'start';

  window.GameObserver = GameObserver;

  return GameObserver;

})(Observer);

Game = (function() {
  function Game(game) {
    this.prevScene = bind(this.prevScene, this);
    this.nextScene = bind(this.nextScene, this);
    this.initialize(game);
  }

  Game.prototype = new createjs.EventDispatcher();

  Game.prototype.EventDispatcher_initialize = Game.prototype.initialize;

  Game.prototype.initialize = function(game) {
    this.observer = new GameObserver();
    return this.setHeader(game.header).setInstructions(game.instructions).setScenes(game.scenes).setScore(game.score);
  };

  Game.prototype.setHeader = function(header) {
    lib.mainContainer.insertBitmap('header', header, d2oda.stage.w / 2, 0, 'tc');
    lib.header.set({
      scaleX: 0.5,
      scaleY: 0.5
    });
    TweenLite.from(lib.header, 0.5, {
      alpha: 0,
      y: lib.header.y - 20
    });
    return this;
  };

  Game.prototype.setInstructions = function(instructions) {
    lib.instructions = new Instructions(instructions);
    lib.mainContainer.add(lib.instructions, false);
    if (instructions.states.length > 1) {
      this.observer.subscribe(GameObserver.NEXT_SCENE, lib.instructions.next);
      this.observer.subscribe(GameObserver.PREV_SCENE, lib.instructions.prev);
    }
    return this;
  };

  Game.prototype.setScore = function(score) {
    lib.score = new Score(score);
    lib.mainContainer.add(lib.score);
    return this;
  };

  Game.prototype.setScenes = function(scenes) {
    lib.scenes = new SceneStack(scenes);
    lib.mainContainer.add(lib.scenes, false);
    this.observer.subscribe(GameObserver.NEXT_SCENE, lib.scenes.next);
    this.observer.subscribe(GameObserver.PREV_SCENE, lib.scenes.prev);
    return this;
  };

  Game.prototype.start = function() {
    lib.scene.init();
    return lib.scenes.addEventListener('complete', this.finish);
  };

  Game.prototype.finish = function() {
    return oda.endGame();
  };

  Game.prototype.nextScene = function() {
    return this.observer.notify(GameObserver.NEXT_SCENE);
  };

  Game.prototype.prevScene = function() {
    return this.observer.notify(GameObserver.PREV_SCENE);
  };

  window.Game = Game;

  return Game;

})();


/*

COMPONENTS CLASSES
 */

ComponentGroup = (function() {
  function ComponentGroup(opts) {
    Module.extend(this, d2oda.methods);
    this.name = opts.id;
    this.group = opts.group;
    this.current = 0;
    if (opts.invisible) {
      this.setInvisible(true, false);
    }
  }

  ComponentGroup.prototype.update = function(opts) {
    var ignoreCurrentAlpha, ignoreY, item, l, len1, len2, len3, len4, len5, len6, m, n, o, p, q, ref, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, results1;
    console.log(this.name, opts);
    switch (opts.type) {
      case 'blinkAll':
        ref = this.group;
        results = [];
        for (l = 0, len1 = ref.length; l < len1; l++) {
          item = ref[l];
          results.push(lib[item].blink());
        }
        return results;
        break;
      case 'pulseAll':
        ref1 = this.group;
        results1 = [];
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          item = ref1[m];
          results1.push(lib[item].pulse());
        }
        return results1;
        break;
      case 'pulse':
        ref2 = this.group;
        for (n = 0, len3 = ref2.length; n < len3; n++) {
          item = ref2[n];
          TweenMax.killTweensOf(lib[item]);
          TweenLite.killTweensOf(lib[item]);
        }
        if (opts.target) {
          return lib[opts.target].pulse();
        }
        break;
      case 'blink':
        ref3 = this.group;
        for (o = 0, len4 = ref3.length; o < len4; o++) {
          item = ref3[o];
          TweenMax.killTweensOf(lib[item]);
          TweenLite.killTweensOf(lib[item]);
          if (opts.end && lib[item].ended) {
            TweenLite.set(lib[item], opts.end);
          }
        }
        if (opts.target) {
          if (opts.end) {
            lib[opts.target].ended = true;
          }
          return lib[opts.target].blink();
        }
        break;
      case 'fadeIn':
        ref4 = this.group;
        for (p = 0, len5 = ref4.length; p < len5; p++) {
          item = ref4[p];
          TweenMax.killTweensOf(lib[item]);
          TweenLite.killTweensOf(lib[item]);
          lib[item].alpha = 0;
          if (!opts.target) {
            ignoreY = (ref5 = opts.ignoreY) != null ? ref5 : false;
            ignoreCurrentAlpha = (ref6 = opts.ignoreCurrentAlpha) != null ? ref6 : false;
            lib[item].fadeIn(ignoreY, ignoreCurrentAlpha);
          }
        }
        if (opts.target) {
          ignoreY = (ref7 = opts.ignoreY) != null ? ref7 : false;
          ignoreCurrentAlpha = (ref8 = opts.ignoreCurrentAlpha) != null ? ref8 : false;
          return lib[opts.target].fadeIn(ignoreY, ignoreCurrentAlpha);
        }
        break;
      case 'fadeOut':
        ref9 = this.group;
        for (q = 0, len6 = ref9.length; q < len6; q++) {
          item = ref9[q];
          TweenMax.killTweensOf(lib[item]);
          TweenLite.killTweensOf(lib[item]);
          if (!opts.target) {
            ignoreY = (ref10 = opts.ignoreY) != null ? ref10 : false;
            ignoreCurrentAlpha = (ref11 = opts.ignoreCurrentAlpha) != null ? ref11 : false;
            lib[item].fadeOut(ignoreY, ignoreCurrentAlpha);
          }
        }
        if (opts.target) {
          ignoreY = (ref12 = opts.ignoreY) != null ? ref12 : false;
          ignoreCurrentAlpha = (ref13 = opts.ignoreCurrentAlpha) != null ? ref13 : false;
          return lib[opts.target].fadeOut(ignoreY, ignoreCurrentAlpha);
        }
        break;
      case 'success':
        this.target = opts.targetGroup;
        this.next = opts.nextGroup;
        this.success = opts.success;
        lib[this.target].setInvisible();
        lib[this.next].setInvisible();
        return this.setInvisible(false);
      case 'choose':
        return this.setInvisible(false);
      case 'hide':
        return this.setInvisible();
    }
  };

  ComponentGroup.prototype.setInvisible = function(status, fade) {
    var item, l, len1, len2, m, ref, ref1, results, results1;
    if (status == null) {
      status = true;
    }
    if (fade == null) {
      fade = true;
    }
    if (status) {
      ref = this.group;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        item = ref[l];
        if (fade) {
          results.push(TweenLite.to(lib[item], 0.5, {
            alpha: 0
          }));
        } else {
          results.push(lib[item].alpha = 0);
        }
      }
      return results;
    } else {
      ref1 = this.group;
      results1 = [];
      for (m = 0, len2 = ref1.length; m < len2; m++) {
        item = ref1[m];
        if (fade) {
          results1.push(TweenLite.to(lib[item], 0.5, {
            alpha: 1
          }));
        } else {
          results1.push(lib[item].alpha = 1);
        }
      }
      return results1;
    }
  };

  ComponentGroup.prototype.doSwitch = function() {
    lib[this.target].update({
      type: 'fadeIn',
      target: this.success
    });
    lib[this.next].setInvisible(false);
    return this.setInvisible();
  };

  ComponentGroup.prototype.doChoose = function(choosenone) {
    return this.choosen = choosenone;
  };

  ComponentGroup.prototype.isComplete = function() {
    return true;
  };

  window.ComponentGroup = ComponentGroup;

  return ComponentGroup;

})();

ComponentObserver = (function(superClass) {
  extend(ComponentObserver, superClass);

  function ComponentObserver() {
    return ComponentObserver.__super__.constructor.apply(this, arguments);
  }

  ComponentObserver.UPDATED = 'component_update';

  window.ComponentObserver = ComponentObserver;

  return ComponentObserver;

})(Observer);

Component = (function() {
  function Component() {}

  Component.prototype.next = function() {};

  Component.prototype.prev = function() {};

  Component.prototype.update = function() {};

  return Component;

})();

Score = (function(superClass) {
  extend(Score, superClass);

  Score.prototype = new createjs.Container();

  Score.prototype.Container_initialize = Score.prototype.initialize;

  function Score(opts) {
    this.minusOne = bind(this.minusOne, this);
    this.initialize(opts);
  }

  Score.prototype.initialize = function(opts) {
    var back, front;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.x = opts.x;
    this.y = opts.y;
    this.counter = opts.init;
    this.type = opts.type;
    switch (opts.type) {
      case 'points':
        this.block = false;
        front = this.createBitmap('front', opts.aimg, 0, 0);
        back = this.createBitmap('back', opts.bimg, 0, 0);
        this.count = this.createText('init', opts.init, '24px Quicksand', opts.acolor, 0, 0, 'center');
        this.total = this.createText('total', opts.total, '24px Quicksand', opts.bcolor, 0, 0, 'center');
        back.x = front.width / 4 * 2;
        back.y = front.height / 4 * 2;
        this.total.x = back.x + back.width / 2;
        this.total.y = back.y + back.height / 2 - this.total.getMeasuredHeight() / 2;
        this.count.x = front.x + front.width / 2;
        this.count.y = front.y + front.height / 2 - this.count.getMeasuredHeight() / 2;
        return this.addChild(back, front, this.count, this.total);
      case 'clock':
        front = this.createBitmap('front', opts.aimg, 0, 0);
        this.count = this.createText('init', opts.init, '24px Quicksand', opts.acolor, 0, 0, 'center');
        this.count.x = front.x + front.width / 2;
        this.count.y = front.y + front.height / 2 - this.count.getMeasuredHeight() / 2;
        return this.addChild(front, this.count);
    }
  };

  Score.prototype.start = function() {
    return this.interval = setInterval(this.minusOne, 1000);
  };

  Score.prototype.stop = function() {
    return clearInterval(this.interval);
  };

  Score.prototype.reset = function() {
    this.counter = 0;
    return this.updateCount(this.counter);
  };

  Score.prototype.minusOne = function() {
    this.counter--;
    this.updateCount(this.counter);
    if (this.counter === 0) {
      this.stop();
      return this.dispatchEvent({
        type: 'count_complete'
      });
    }
  };

  Score.prototype.plusOne = function() {
    createjs.Sound.play('s/good');
    if (this.block === true) {
      this.block = false;
      return;
    }
    this.counter++;
    return this.updateCount(this.counter);
  };

  Score.prototype.enableBlock = function() {
    return this.block = true;
  };

  Score.prototype.updateTotal = function(txt) {
    return this.total.text = txt;
  };

  Score.prototype.updateCount = function(txt) {
    return this.count.text = txt;
  };

  window.Score = Score;

  return Score;

})(Component);

Instructions = (function(superClass) {
  extend(Instructions, superClass);

  Instructions.prototype = new createjs.Container();

  Instructions.prototype.Container_initialize = Instructions.prototype.initialize;

  function Instructions(opts) {
    this.instructionsComplete = bind(this.instructionsComplete, this);
    this.prev = bind(this.prev, this);
    this.next = bind(this.next, this);
    this.initialize(opts);
  }

  Instructions.prototype.initialize = function(opts) {
    var it, l, len1, npos, ref, ref1, texto, triangle;
    this.Container_initialize();
    this.x = opts.x;
    this.y = opts.y;
    this.states = opts.states;
    this.playing = false;
    this.currentState = 0;
    this.custom = (ref = this.states[this.currentState].custom) != null ? ref : false;
    triangle = new createjs.Shape();
    triangle.graphics.beginFill('#bcd748').moveTo(0, 0).lineTo(8, 5).lineTo(0, 10);
    triangle.y = 5;
    if (this.custom === true) {
      it = 0;
      npos = 14;
      ref1 = this.states[this.currentState].text;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        texto = ref1[l];
        if (texto === '#ital') {
          this.label = new createjs.Text(this.states[this.currentState].italics[it], 'Bold italic 25px Browallia New', '#000');
          it++;
        } else {
          this.label = new createjs.Text(texto, '25px Browallia New', '#000');
        }
        this.label.x = npos;
        this.addChild(this.label);
        console.log(this.label);
        npos = npos + this.label.getMeasuredWidth() + 5;
      }
    } else {
      this.label = new createjs.Text(this.states[this.currentState].text, '25px Browallia New', '#000');
      this.label.x = 14;
      this.addChild(this.label);
    }
    this.addChild(triangle);
    return TweenLite.from(this, 0.5, {
      alpha: 0,
      x: this.x - 20
    });
  };

  Instructions.prototype.playSound = function() {
    var snd;
    if (!this.states[this.currentState].played) {
      this.playing = true;
      this.states[this.currentState].played = true;
      createjs.Sound.stop();
      snd = createjs.Sound.play(this.states[this.currentState].sound);
      snd.addEventListener('complete', this.instructionsComplete);
      return snd;
    }
  };

  Instructions.prototype.next = function() {
    this.currentState++;
    if (this.states.length > 1 && this.currentState < this.states.length) {
      this.label.text = this.states[this.currentState].text;
      TweenLite.from(this, 0.5, {
        alpha: 0,
        x: this.x - 20
      });
      return this.playSound();
    }
  };

  Instructions.prototype.prev = function() {
    this.currentState--;
    if (this.currentState >= 0) {
      this.label.text = this.states[this.currentState].text;
      return TweenLite.from(this, 0.5, {
        alpha: 0,
        x: this.x - 20
      });
    } else {
      return this.currentState++;
    }
  };

  Instructions.prototype.instructionsComplete = function() {
    this.playing = false;
    console.log('instructions complete');
    return this.dispatchEvent({
      type: 'complete'
    });
  };

  window.Instructions = Instructions;

  return Instructions;

})(Component);

WriteContainer = (function(superClass) {
  extend(WriteContainer, superClass);

  WriteContainer.prototype = new createjs.Container();

  WriteContainer.prototype.Container_initialize = WriteContainer.prototype.initialize;

  function WriteContainer(opts) {
    this.openPrompt = bind(this.openPrompt, this);
    this.initialize(opts);
  }

  WriteContainer.prototype.initialize = function(opts) {
    var align, fcolor, font, ref, ref1, ref2, ref3, ref4, ref5, ref6;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    Module.extend(this, d2oda.actions);
    this.x = opts.x;
    this.y = opts.y;
    this.name = (ref = opts.name) != null ? ref : opts.id;
    font = (ref1 = opts.font) != null ? ref1 : 'Arial 20px';
    fcolor = (ref2 = opts.color) != null ? ref2 : '#333';
    this.stroke = (ref3 = opts.stroke) != null ? ref3 : 3;
    this.scolor = (ref4 = opts.scolor) != null ? ref4 : '#333';
    this.bcolor = (ref5 = opts.bcolor) != null ? ref5 : '#FFF';
    align = (ref6 = opts.align) != null ? ref6 : '';
    this.mainText = this.createText('#{@name}_main', '', font, fcolor, 0, 0, align);
    this.pastText = this.createText('#{@name}_past', '', font, fcolor, 0, this.mainText.getMeasuredHeight() + opts.margin, align);
    this.pastText.text = '';
    this.back = new createjs.Shape();
    this.back.y = this.mainText.getMeasuredHeight() + opts.margin;
    this.add(this.back, false);
    this.add(this.pastText, false);
    this.add(this.mainText, false);
    return this.addEventListener('click', this.openPrompt);
  };

  WriteContainer.prototype.openPrompt = function() {
    var verb;
    verb = prompt("Enter the past simple form of " + this.mainText.text);
    this.pastText.text = verb;
    if (verb === this.success) {
      return this.complete = true;
    }
  };

  WriteContainer.prototype.update = function(opts) {
    if (this.children[3]) {
      this.removeChildAt(3);
    }
    this.pastText.text = opts.success;
    this.mainText.text = opts.text;
    this.success = opts.success;
    this.complete = false;
    this.back.graphics.c().f(this.bcolor).dr(0, 0, this.pastText.getMeasuredWidth(), this.pastText.getMeasuredHeight()).ss(this.stroke).s(this.scolor).mt(0, this.pastText.getMeasuredHeight()).lt(this.pastText.getMeasuredWidth(), this.pastText.getMeasuredHeight());
    this.back.x = -this.pastText.getMeasuredWidth() / 2;
    this.pastText.text = '';
    console.log(this);
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  WriteContainer.prototype.showEvaluation = function() {
    console.log;
    if (this.complete) {
      return this.insertBitmap('correct', 'correct', this.getBounds().width, this.getBounds().height / 2, 'ml');
    } else {
      return this.insertBitmap('wrong', 'wrong', this.getBounds().width, this.getBounds().height / 2, 'ml');
    }
  };

  WriteContainer.prototype.isComplete = function() {
    return true;
  };

  return WriteContainer;

})(Component);

ImageContainer = (function(superClass) {
  extend(ImageContainer, superClass);

  ImageContainer.prototype = new createjs.Container();

  ImageContainer.prototype.Container_initialize = ImageContainer.prototype.initialize;

  function ImageContainer(opts) {
    this.initialize(opts);
  }

  ImageContainer.prototype.initialize = function(opts) {
    var align, b, ref, ref1, ref2, ref3;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    Module.extend(this, d2oda.actions);
    align = (ref = opts.align) != null ? ref : '';
    this.name = (ref1 = opts.name) != null ? ref1 : opts.id;
    this.x = opts.x;
    this.y = opts.y;
    this.scaleX = (ref2 = opts.scale) != null ? ref2 : 1;
    this.scaleY = (ref3 = opts.scale) != null ? ref3 : 1;
    b = this.createBitmap(this.name, opts.id, 0, 0, align);
    this.width = b.width;
    this.height = b.height;
    this.mouseEnabled = true;
    return this.add(b, false);
  };

  ImageContainer.prototype.isComplete = function() {
    TweenLite.killTweensOf(this);
    TweenMax.killTweensOf(this);
    this.alpha = 1;
    return true;
  };

  return ImageContainer;

})(Component);

TextContainer = (function(superClass) {
  extend(TextContainer, superClass);

  TextContainer.prototype = new createjs.Container();

  TextContainer.prototype.Container_initialize = TextContainer.prototype.initialize;

  function TextContainer(opts) {
    this.initialize(opts);
  }

  TextContainer.prototype.initialize = function(opts) {
    var align, fcolor, font, ref, ref1, ref2, ref3, ref4, ref5, t;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    Module.extend(this, d2oda.actions);
    font = (ref = opts.font) != null ? ref : '20px Arial';
    fcolor = (ref1 = opts.fcolor) != null ? ref1 : '#333';
    align = (ref2 = opts.align) != null ? ref2 : '';
    this.name = (ref3 = opts.name) != null ? ref3 : opts.id;
    this.x = opts.x;
    this.y = opts.y;
    this.scaleX = (ref4 = opts.scale) != null ? ref4 : 1;
    this.scaleY = (ref5 = opts.scale) != null ? ref5 : 1;
    t = this.createText(this.name, opts.text, font, fcolor, 0, 0, align);
    if (opts.lineWidth) {
      t.lineWidth = opts.lineWidth;
    }
    this.width = t.getMeasuredWidth();
    this.height = t.getMeasuredHeight();
    this.mouseEnabled = true;
    return this.add(t, false);
  };

  TextContainer.prototype.isComplete = function() {
    TweenLite.killTweensOf(this);
    TweenMax.killTweensOf(this);
    this.alpha = 1;
    return true;
  };

  return TextContainer;

})(Component);

SpriteContainer = (function(superClass) {
  extend(SpriteContainer, superClass);

  SpriteContainer.prototype = new createjs.Container();

  SpriteContainer.prototype.Container_initialize = SpriteContainer.prototype.initialize;

  function SpriteContainer(opts) {
    this.initialize(opts);
  }

  SpriteContainer.prototype.initialize = function(opts) {
    var align, ref, ref1, ref2, ref3;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    Module.extend(this, d2oda.actions);
    align = (ref = opts.align) != null ? ref : '';
    this.name = (ref1 = opts.name) != null ? ref1 : opts.id;
    this.x = opts.x;
    this.y = opts.y;
    this.scaleX = (ref2 = opts.scale) != null ? ref2 : 1;
    this.scaleY = (ref3 = opts.scale) != null ? ref3 : 1;
    this.sprite = this.createSprite("sp_" + this.name, opts.imgs, opts.frames, 0, 0, align);
    this.width = this.sprite.width;
    this.height = this.sprite.height;
    this.mouseEnabled = true;
    this.droptargets = new Array();
    this.observer = new ComponentObserver();
    return this.add(this.sprite, false);
  };

  SpriteContainer.prototype.prevFrame = function() {
    return this.sprite.currentFrame--;
  };

  SpriteContainer.prototype.nextFrame = function() {
    return this.sprite.currentFrame++;
  };

  SpriteContainer.prototype.nextStep = function() {
    if (this.storyboard.length > 0) {
      return this.sprite.animation.gotoAndStop(this.storyboard[this.sprite.animation.currentFrame]);
    }
  };

  SpriteContainer.prototype.goto = function(frame) {
    return this.sprite.animation.gotoAndStop(frame);
  };

  SpriteContainer.prototype.update = function(opts) {
    this.droptargets = [this.sprite];
    this.success = opts.success;
    this.storyboard = opts.storyboard;
    if (opts.goto) {
      this.goto(opts.goto);
    }
    return this.observer.notify(ComponentObserver.UPDATED);
  };

  SpriteContainer.prototype.isComplete = function() {
    TweenLite.killTweensOf(this);
    TweenMax.killTweensOf(this);
    if (this.alpha !== 0) {
      this.alpha = 1;
    }
    return this.sprite.animation.currentFrame > 0;
  };

  return SpriteContainer;

})(Component);

DragContainer = (function(superClass) {
  extend(DragContainer, superClass);

  DragContainer.prototype = new createjs.Container();

  DragContainer.prototype.Container_initialize = DragContainer.prototype.initialize;

  function DragContainer(opts) {
    this.evaluateDrop = bind(this.evaluateDrop, this);
    this.handleMouseDown = bind(this.handleMouseDown, this);
    this.update = bind(this.update, this);
    this.initialize(opts);
  }

  DragContainer.prototype.initialize = function(opts) {
    var b, l, len1, ref, ref1, ref2, t;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    Module.extend(this, d2oda.actions);
    Module.extend(this, d2oda.utilities);
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.x = opts.x;
    this.y = opts.y;
    this.scaleX = this.scaleY = (ref1 = opts.scale) != null ? ref1 : 1;
    this.pos = {
      x: this.x,
      y: this.y
    };
    this.index = opts.index;
    this["eval"] = opts["eval"];
    this.droptargets = new Array();
    b = this.createBitmap(this.name, opts.id, 0, 0);
    this.bmpname = opts.name;
    this.bmpid = opts.id;
    this.width = b.width;
    this.height = b.height;
    this.setPosition(opts.align);
    switch (opts.afterSuccess) {
      case 'hide':
        this.afterSuccess = this.hide;
        break;
      case 'inplace':
        this.afterSuccess = this.putInPlace;
        break;
      case 'return':
        this.afterSuccess = this.returnToPlace;
        break;
      case 'origin':
        this.afterSuccess = this.setInOrigin;
    }
    switch (opts.afterFail) {
      case 'hide':
        this.afterFail = this.hide;
        break;
      case 'inplace':
        this.afterFail = this.putInPlace;
        break;
      case 'return':
        this.afterFail = this.returnToPlace;
        break;
      case 'origin':
        this.afterFail = this.setInOrigin;
    }
    this.add(b, false);
    if (this.isArray(opts.target)) {
      this.target = opts.target;
    } else {
      this.target = lib[opts.target];
    }
    if (this.target) {
      if (this.isArray(this.target)) {
        ref2 = this.target;
        for (l = 0, len1 = ref2.length; l < len1; l++) {
          t = ref2[l];
          lib[t].observer.subscribe(ComponentObserver.UPDATED, this.update);
        }
      } else {
        this.target.observer.subscribe(ComponentObserver.UPDATED, this.update);
      }
    }
    return this.on('mousedown', this.handleMouseDown);
  };

  DragContainer.prototype.update = function(opts) {
    var alldrops, l, len1, ref, t;
    if (this.isArray(this.target)) {
      alldrops = new Array();
      ref = this.target;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        t = ref[l];
        alldrops.merge(lib[t].droptargets);
      }
      return this.droptargets = alldrops;
    } else {
      return this.droptargets = this.target.droptargets;
    }
  };

  DragContainer.prototype.handleMouseDown = function(e) {
    var offset, posX, posY;
    posX = e.stageX / d2oda.stage.r;
    posY = e.stageY / d2oda.stage.r;
    offset = {
      x: posX - this.x,
      y: posY - this.y
    };
    this.x = posX - offset.x;
    this.y = posY - offset.y;
    this.on('pressmove', (function(_this) {
      return function(ev) {
        posX = ev.stageX / d2oda.stage.r;
        posY = ev.stageY / d2oda.stage.r;
        _this.x = posX - offset.x;
        _this.y = posY - offset.y;
        return false;
      };
    })(this));
    this.on('pressup', (function(_this) {
      return function(ev) {
        _this.removeAllEventListeners('pressmove');
        _this.removeAllEventListeners('pressup');
        if (_this.droptargets && _this.droptargets.length > 0) {
          _this.evaluateDrop(e);
        } else {
          _this.dispatchEvent({
            type: 'drop'
          });
        }
        return false;
      };
    })(this));
    return false;
  };

  DragContainer.prototype.evaluateDrop = function(e) {
    var drop, dropTester, dropped, l, len1, pt, ref, ref1, target;
    target = null;
    dropped = false;
    ref = this.droptargets;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      drop = ref[l];
      pt = drop.globalToLocal(oda.stage.mouseX, oda.stage.mouseY);
      dropTester = (ref1 = drop.hitTester) != null ? ref1 : drop;
      if (dropTester.hitTest(pt.x, pt.y)) {
        if (dropTester.animation || dropTester.parent.animation) {
          console.log(drop.parent.alpha);
          if (drop.parent.alpha > 0) {
            target = drop;
            dropped = true;
          }
        } else {
          target = drop;
          dropped = true;
        }
      }
      console.log(dropped, target);
    }
    if (dropped) {
      d2oda.evaluator.evaluate(this["eval"], this.name, target);
      return this.dispatchEvent({
        type: 'dropped',
        drop: target
      });
    } else {
      return this.returnToPlace(this.alpha, this.scaleX, this.scaleY);
    }
  };

  return DragContainer;

})(Component);

ButtonContainer = (function(superClass) {
  extend(ButtonContainer, superClass);

  ButtonContainer.prototype = new createjs.Container();

  ButtonContainer.prototype.Container_initialize = ButtonContainer.prototype.initialize;

  function ButtonContainer(opts) {
    this.initialize(opts);
  }

  ButtonContainer.prototype.initialize = function(opts) {
    var ref, ref1, ref2, ref3;
    this.Container_initialize();
    Module.extend(this, d2oda.actions);
    Module.extend(this, d2oda.methods);
    Module.extend(this, d2oda.utilities);
    this.x = opts.x;
    this.y = opts.y;
    this.txtFont = '20px Arial';
    this.txtColor = '#333';
    this.txtAlign = 'left';
    this.index = opts.index;
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.scale = this.scaleX = this.scaleY = (ref1 = opts.scale) != null ? ref1 : 1;
    this.states = opts.states;
    this.currentState = 0;
    this.overTween = (ref2 = opts.overTween) != null ? ref2 : true;
    this.setImageText(this.states[this.currentState].img, this.states[this.currentState].txt);
    this.alpha = (ref3 = opts.alpha) != null ? ref3 : 1;
    if (this.isArray(opts.target)) {
      this.target = opts.target;
    } else {
      this.target = lib[opts.target];
    }
    if (opts.target) {
      this.target = lib[opts.target];
    }
    if (this.overTween) {
      this.addEventListener('mouseover', (function(_this) {
        return function() {
          if (opts.overScale) {
            return TweenLite.to(_this, 0.5, {
              scaleX: opts.overScale,
              scaleY: opts.overScale
            });
          } else {
            return TweenLite.to(_this, 0.5, {
              scaleX: 1.2,
              scaleY: 1.2
            });
          }
        };
      })(this));
      this.addEventListener('mouseout', (function(_this) {
        return function() {
          return TweenLite.to(_this, 0.5, {
            scaleX: _this.scale,
            scaleY: _this.scale
          });
        };
      })(this));
    }
    return this.addEventListener('click', (function(_this) {
      return function() {
        if (opts.isRepeat) {
          return d2oda.evaluator.evaluate('repeat');
        } else if (opts.isFinish) {
          return d2oda.evaluator.evaluate('finish', null, opts.target);
        } else {
          return d2oda.evaluator.evaluate(opts["eval"], _this.name, opts.target);
        }
      };
    })(this));
  };

  ButtonContainer.prototype.setImageText = function(img, txt) {
    var align, b, hit, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, t, text, x, y;
    this.removeAllChildren();
    this.alpha = 1;
    if (img) {
      x = (ref = img.x) != null ? ref : 0;
      y = (ref1 = img.y) != null ? ref1 : 0;
      align = (ref2 = img.align) != null ? ref2 : '';
      b = this.createBitmap('#{@name}_img', img.name, x, y, align);
      if (img.scale) {
        b.scaleX = b.scaleY = img.scale;
      }
      this.add(b, false);
    }
    if (txt) {
      text = (ref3 = txt.text) != null ? ref3 : '';
      this.txtFont = (ref4 = txt.font) != null ? ref4 : this.txtFont;
      this.txtColor = (ref5 = txt.color) != null ? ref5 : this.txtColor;
      x = (ref6 = txt.x) != null ? ref6 : 0;
      y = (ref7 = txt.y) != null ? ref7 : 0;
      this.txtAlign = (ref8 = txt.align) != null ? ref8 : this.txtAlign;
      t = this.createText('#{@name}_txt', text, this.txtFont, this.txtColor, x, y, this.txtAlign);
      if (txt.lineWidth) {
        t.lineWidth = txt.lineWidth;
      }
      hit = new createjs.Shape();
      switch (this.txtAlign) {
        case 'left':
          hit.graphics.beginFill('#000').drawRect(-5, -3, t.getMeasuredWidth() + 10, t.getMeasuredHeight() + 6);
          break;
        case 'center':
          hit.graphics.beginFill('#000').drawRect(-5 - t.getMeasuredWidth() / 2, -3, t.getMeasuredWidth() + 10, t.getMeasuredHeight() + 6);
          break;
        case 'right':
          hit.graphics.beginFill('#000').drawRect(-5 - t.getMeasuredWidth(), -3, t.getMeasuredWidth() + 10, t.getMeasuredHeight() + 6);
      }
      t.hitArea = hit;
      return this.add(t, false);
    }
  };

  ButtonContainer.prototype.updateState = function() {
    this.currentState++;
    if (this.currentState < this.states.length) {
      TweenLite.killTweensOf(this);
      this.setImageText(this.states[this.currentState].img, this.states[this.currentState].txt);
      this.scaleX = this.scaleY = this.scale;
      if (this.states[this.currentState].removeListeners) {
        this.removeAllEventListeners();
      }
      return TweenLite.from(this, 0.3, {
        alpha: 0
      });
    } else {
      return this.currentState--;
    }
  };

  ButtonContainer.prototype.update = function(opts) {
    TweenLite.killTweensOf(this);
    this.setImageText(opts.img, opts.txt);
    this.mouseEnabled = true;
    return TweenLite.from(this, 0.5, {
      alpha: 0
    });
  };

  ButtonContainer.prototype.isComplete = function() {
    return true;
  };

  return ButtonContainer;

})(Component);

ChooseContainer = (function(superClass) {
  extend(ChooseContainer, superClass);

  ChooseContainer.prototype = new createjs.Container();

  ChooseContainer.prototype.Container_initialize = ChooseContainer.prototype.initialize;

  function ChooseContainer(opts) {
    this.initialize(opts);
  }

  ChooseContainer.prototype.initialize = function(opts) {
    var ref;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.x = opts.x;
    this.y = opts.y;
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.target = opts.target;
    this["eval"] = opts["eval"];
    this.label = opts.label;
    this.caption = opts.caption;
    return this.bullets = opts.bullets;
  };

  ChooseContainer.prototype.update = function(opts) {
    var bmp, hito1, hito2, hito3, lineWidth, opt1, opt2, opt3, ref, ref1, y;
    this.removeAllChildren();
    console.log(opts);
    switch (opts.type) {
      case 'img':
        opt1 = this.createBitmap(this.name + "_opt1", opts.opt1, 0, 100, 'tr');
        opt1.index = 1;
        opt2 = this.createBitmap(this.name + "_opt2", opts.opt2, 0, 100);
        opt2.index = 2;
        break;
      case 'txt':
        if (opts.img) {
          bmp = this.insertBitmap(this.name + "_img", opts.img.name, opts.img.x, opts.img.y, 'tc');
          if (opts.img.scale) {
            bmp.scaleY = bmp.scaleX = opts.img.scale;
          }
        }
        lineWidth = this.bullets.lineWidth ? this.bullets.lineWidth : 200;
        this.insertText("separator", '/', this.bullets.font, this.bullets.color, 0, 400, 'center');
        opt1 = this.createText(this.name + "_opt1", opts.opt1, this.bullets.font, this.bullets.color, -20, 400, 'right');
        if (this.bullets.lineWidth) {
          opt1.lineWidth = this.bullets.lineWidth;
        }
        hito1 = new createjs.Shape();
        hito1.graphics.beginFill('#000').drawRect(-opt1.getMeasuredWidth() - 5, -3, opt1.getMeasuredWidth() + 10, opt1.getMeasuredHeight() + 6);
        opt1.hitArea = hito1;
        opt1.index = 1;
        opt2 = this.createText(this.name + "_opt2", opts.opt2, this.bullets.font, this.bullets.color, 20, 400, 'left');
        if (this.bullets.lineWidth) {
          opt2.lineWidth = this.bullets.lineWidth;
        }
        hito2 = new createjs.Shape();
        hito2.graphics.beginFill('#000').drawRect(-5, -3, opt2.getMeasuredWidth() + 10, opt2.getMeasuredHeight() + 6);
        opt2.hitArea = hito2;
        opt2.index = 2;
        break;
      case 'mtxt':
        if (opts.img) {
          bmp = this.insertBitmap(this.name + "_img", opts.img.name, opts.img.x, opts.img.y, 'tc');
          if (opts.img.scale) {
            bmp.scaleY = bmp.scaleX = opts.img.scale;
          }
        }
        lineWidth = this.bullets.lineWidth ? this.bullets.lineWidth : 200;
        opt1 = this.createText(this.name + "_opt1", opts.opt1, this.bullets.font, this.bullets.color, 0, 300, 'center');
        if (this.bullets.lineWidth) {
          opt1.lineWidth = this.bullets.lineWidth;
        }
        hito1 = new createjs.Shape();
        hito1.graphics.beginFill('#000').drawRect(-opt1.getMeasuredWidth() / 2 - 5, -3, opt1.getMeasuredWidth() + 10, opt1.getMeasuredHeight() + 6);
        opt1.hitArea = hito1;
        opt1.index = 1;
        opt2 = this.createText(this.name + "_opt2", opts.opt2, this.bullets.font, this.bullets.color, 0, opt1.y + opt1.getMeasuredHeight() + 10, 'center');
        if (this.bullets.lineWidth) {
          opt2.lineWidth = this.bullets.lineWidth;
        }
        hito2 = new createjs.Shape();
        hito2.graphics.beginFill('#000').drawRect(-opt2.getMeasuredWidth() / 2 - 5, -3, opt2.getMeasuredWidth() + 10, opt2.getMeasuredHeight() + 6);
        opt2.hitArea = hito2;
        opt2.index = 2;
        opt3 = this.createText(this.name + "_opt3", opts.opt3, this.bullets.font, this.bullets.color, 0, opt2.y + opt2.getMeasuredHeight() + 10, 'center');
        if (this.bullets.lineWidth) {
          opt3.lineWidth = this.bullets.lineWidth;
        }
        hito3 = new createjs.Shape();
        hito3.graphics.beginFill('#000').drawRect(-opt3.getMeasuredWidth() / 2 - 5, -3, opt3.getMeasuredWidth() + 10, opt3.getMeasuredHeight() + 6);
        opt3.hitArea = hito3;
        opt3.index = 3;
    }
    this.add(opt1);
    opt1.addEventListener('mouseover', (function(_this) {
      return function() {
        return TweenLite.to(opt1, 0.5, {
          alpha: 0.5
        });
      };
    })(this));
    opt1.addEventListener('mouseout', (function(_this) {
      return function() {
        return TweenLite.to(opt1, 0.5, {
          alpha: 1
        });
      };
    })(this));
    opt1.addEventListener('click', (function(_this) {
      return function() {
        return d2oda.evaluator.evaluate(_this["eval"], _this.name + "_opt1", _this.target);
      };
    })(this));
    this.add(opt2);
    opt2.addEventListener('mouseover', (function(_this) {
      return function() {
        return TweenLite.to(opt2, 0.5, {
          alpha: 0.5
        });
      };
    })(this));
    opt2.addEventListener('mouseout', (function(_this) {
      return function() {
        return TweenLite.to(opt2, 0.5, {
          alpha: 1
        });
      };
    })(this));
    opt2.addEventListener('click', (function(_this) {
      return function() {
        return d2oda.evaluator.evaluate(_this["eval"], _this.name + "_opt2", _this.target);
      };
    })(this));
    if (opt3) {
      this.add(opt3);
      opt3.addEventListener('mouseover', (function(_this) {
        return function() {
          return TweenLite.to(opt3, 0.5, {
            alpha: 0.5
          });
        };
      })(this));
      opt3.addEventListener('mouseout', (function(_this) {
        return function() {
          return TweenLite.to(opt3, 0.5, {
            alpha: 1
          });
        };
      })(this));
      opt3.addEventListener('click', (function(_this) {
        return function() {
          return d2oda.evaluator.evaluate(_this["eval"], _this.name + "_opt3", _this.target);
        };
      })(this));
    }
    if (opts.label) {
      y = (ref = opts.ly) != null ? ref : 40;
      this.insertText(this.name + "_label", opts.label, this.label.font, this.label.color, 0, y, 'center');
    }
    if (opts.caption) {
      y = (ref1 = opts.cy) != null ? ref1 : 360;
      this.insertText(this.name + "_caption", opts.caption, this.caption.font, this.caption.color, 0, y, 'center');
    }
    return TweenLite.from(this, 0.5, {
      alpha: 0
    });
  };

  ChooseContainer.prototype.isComplete = function() {
    return true;
  };

  return ChooseContainer;

})(Component);

LabelContainer = (function(superClass) {
  extend(LabelContainer, superClass);

  LabelContainer.prototype = new createjs.Container();

  LabelContainer.prototype.Container_initialize = LabelContainer.prototype.initialize;

  function LabelContainer(opts) {
    this.initialize(opts);
  }

  LabelContainer.prototype.initialize = function(opts) {
    var align, color, font, ref, ref1, ref2, ref3;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.x = opts.x;
    this.y = opts.y;
    this.name = (ref = opts.name) != null ? ref : opts.id;
    font = (ref1 = opts.font) != null ? ref1 : 'Arial 20px';
    color = (ref2 = opts.color) != null ? ref2 : '#333';
    align = (ref3 = opts.align) != null ? ref3 : '';
    this.text = this.createText('txt', '', font, color, 0, 0, align);
    return this.add(this.text, false);
  };

  LabelContainer.prototype.update = function(opts) {
    this.text.text = opts.text;
    this.success = opts.success;
    this.complete = false;
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  LabelContainer.prototype.isComplete = function() {
    return this.complete;
  };

  return LabelContainer;

})(Component);

CloneCompleterContainer = (function(superClass) {
  extend(CloneCompleterContainer, superClass);

  CloneCompleterContainer.prototype = new createjs.Container();

  CloneCompleterContainer.prototype.Container_initialize = CloneCompleterContainer.prototype.initialize;

  function CloneCompleterContainer(opts) {
    this.initialize(opts);
  }

  CloneCompleterContainer.prototype.initialize = function(opts) {
    var ref, ref1, ref2, ref3, ref4;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.x = (ref1 = opts.x) != null ? ref1 : 0;
    this.y = (ref2 = opts.y) != null ? ref2 : 0;
    this.uwidth = (ref3 = opts.uwidth) != null ? ref3 : 100;
    this.uheight = (ref4 = opts.uheight) != null ? ref4 : 100;
    this.observer = new ComponentObserver();
    return this.droptargets = new Array();
  };

  CloneCompleterContainer.prototype.update = function(opts) {
    var c, child, gropts, i, l, len1, npos, ref;
    this.removeAllChildren();
    this.droptargets = new Array();
    i = 0;
    npos = 0;
    ref = opts.containers;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      c = ref[l];
      if (c.opts) {
        gropts = c.opts;
      } else {
        gropts = opts;
      }
      child = new CloneContainer(gropts, c.type, c.success, c.x, c.y, this.uwidth, this.uheight);
      this.droptargets.push(child);
      this.add(child, false);
    }
    this.observer.notify(ComponentObserver.UPDATED);
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  CloneCompleterContainer.prototype.isComplete = function() {
    return true;
  };

  return CloneCompleterContainer;

})(Component);

CloneContainer = (function(superClass) {
  extend(CloneContainer, superClass);

  CloneContainer.prototype = new createjs.Container();

  CloneContainer.prototype.Container_initialize = CloneContainer.prototype.initialize;

  function CloneContainer(opts, type, success, x, y, width, height) {
    this.initialize(opts, type, success, x, y, width, height);
  }

  CloneContainer.prototype.initialize = function(opts, type, success, x, y, width, height) {
    var child, ref;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
    this.width = width;
    this.height = height;
    this.success = success;
    this.complete = this.success !== '#empty' ? false : true;
    this.img = null;
    child = new createjs.Shape();
    child.graphics.beginFill('#FFF').drawRect(0, 0, this.width, this.height);
    child.alpha = 0.1;
    return this.add(child, false);
  };

  CloneContainer.prototype.showEvaluation = function() {
    if (this.complete) {
      return this.insertBitmap('correct', 'correct', this.width, this.height / 2, 'ml');
    } else {
      return this.insertBitmap('wrong', 'wrong', this.width, this.height / 2, 'ml');
    }
  };

  CloneContainer.prototype.update = function(complete, img) {
    if (complete == null) {
      complete = true;
    }
    if (img == null) {
      img = '';
    }
    if (this.img !== null) {
      this.removeChild(this.img);
    }
    this.img = this.createBitmap('img', img, this.width / 2, this.height / 2, 'mc');
    this.img.scaleX = this.img.scaleY = (this.height - 5) / this.img.height;
    this.add(this.img, false);
    this.hitTester = this.img.hitTester;
    return this.complete = complete;
  };

  return CloneContainer;

})(Component);

StepsContainer = (function(superClass) {
  extend(StepsContainer, superClass);

  StepsContainer.prototype = new createjs.Container();

  StepsContainer.prototype.Container_initialize = StepsContainer.prototype.initialize;

  function StepsContainer(opts) {
    this.initialize(opts);
  }

  StepsContainer.prototype.initialize = function(opts) {
    var ref, ref1, ref2;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.x = (ref1 = opts.x) != null ? ref1 : 0;
    this.y = (ref2 = opts.y) != null ? ref2 : 0;
    this.observer = new ComponentObserver();
    return this.droptargets = new Array();
  };

  StepsContainer.prototype.update = function(opts) {
    var c, child, gropts, i, l, len1, npos, ref;
    this.removeAllChildren();
    i = 0;
    npos = 0;
    ref = opts.containers;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      c = ref[l];
      if (c.opts) {
        gropts = c.opts;
      } else {
        gropts = opts;
      }
      child = new StepContainer(gropts, c.type, c.success, c.x, c.y);
      this.droptargets.push(child);
      this.add(child, false);
    }
    this.observer.notify(ComponentObserver.UPDATED);
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  StepsContainer.prototype.isComplete = function() {
    return true;
  };

  return StepsContainer;

})(Component);

StepContainer = (function(superClass) {
  extend(StepContainer, superClass);

  StepContainer.prototype = new createjs.Container();

  StepContainer.prototype.Container_initialize = StepContainer.prototype.initialize;

  function StepContainer(opts, type, success, x, y) {
    this.initialize(opts, type, success, x, y);
  }

  StepContainer.prototype.initialize = function(opts, type, success, x, y) {
    var child, ref, ref1;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
    this.width = (ref = opts.width) != null ? ref : opts.radius;
    this.height = (ref1 = opts.height) != null ? ref1 : opts.radius;
    this.success = success;
    this.complete = false;
    switch (type) {
      case 'rshp':
        child = new createjs.Shape();
        child.graphics.beginFill(opts.bcolor).setStrokeStyle(opts.stroke).beginStroke(opts.scolor).drawRoundRect(0, 0, opts.width, opts.height, opts.radius);
    }
    return this.add(child, false);
  };

  StepContainer.prototype.showEvaluation = function() {
    if (this.complete) {
      return this.insertBitmap('correct', 'correct', this.width, this.height / 2, 'ml');
    } else {
      return this.insertBitmap('wrong', 'wrong', this.width, this.height / 2, 'ml');
    }
  };

  StepContainer.prototype.update = function(complete) {
    if (complete == null) {
      complete = true;
    }
    return this.complete = complete;
  };

  return StepContainer;

})(Component);

GridContainer = (function(superClass) {
  extend(GridContainer, superClass);

  GridContainer.prototype = new createjs.Container();

  GridContainer.prototype.Container_initialize = GridContainer.prototype.initialize;

  function GridContainer(opts) {
    this.initialize(opts);
  }

  GridContainer.prototype.initialize = function(opts) {
    var align, b, cell, color, currentCol, currentRow, font, l, len1, ref, ref1, ref10, ref11, ref12, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, x, y;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    Module.extend(this, d2oda.utilities);
    this.x = (ref = opts.x) != null ? ref : 0;
    this.y = (ref1 = opts.y) != null ? ref1 : 0;
    this.columns = (ref2 = opts.columns) != null ? ref2 : 1;
    this.rows = (ref3 = opts.rows) != null ? ref3 : 1;
    this.uwidth = (ref4 = opts.uwidth) != null ? ref4 : 100;
    this.uheight = (ref5 = opts.uheight) != null ? ref5 : 100;
    this.name = (ref6 = opts.name) != null ? ref6 : opts.id;
    this.currentTarget = 0;
    this.warnings = 0;
    this.targets = new Array();
    if (opts.label) {
      font = (ref7 = opts.label.font) != null ? ref7 : 'Arial 20px';
      color = (ref8 = opts.label.color) != null ? ref8 : '#333';
      align = (ref9 = opts.label.align) != null ? ref9 : '';
      x = (ref10 = opts.label.x) != null ? ref10 : 0;
      y = (ref11 = opts.label.y) != null ? ref11 : 0;
      this.text = this.createText('txt', '', font, color, x, y, align);
      this.add(this.text);
    }
    this.cells = opts.mixed ? this.shuffle(opts.cells) : opts.cells;
    switch (opts.align) {
      case 'evenodd':
        currentCol = 0;
        currentRow = 0;
        ref12 = this.cells;
        results = [];
        for (l = 0, len1 = ref12.length; l < len1; l++) {
          cell = ref12[l];
          if (currentRow % 2 === 0) {
            x = currentCol * this.uwidth;
          } else {
            x = ((this.columns - 1) - currentCol) * this.uwidth;
          }
          b = this.insertBitmap(cell.img, cell.img, x, currentRow * this.uheight, 'mc');
          b.scaleX = b.scaleY = 0.5;
          this.targets.push(b);
          currentCol++;
          if (currentCol === this.columns) {
            currentCol = 0;
            results.push(currentRow++);
          } else {
            results.push(void 0);
          }
        }
        return results;
    }
  };

  GridContainer.prototype.update = function(opts) {
    var cell;
    cell = this.cells[this.currentTarget];
    this.success = cell.success;
    this.text.text = cell.txt;
    this.targets[this.currentTarget].complete = false;
    this.blink(this.targets[this.currentTarget]);
    return TweenLite.from(this.text, 0.3, {
      alpha: 0,
      y: this.text.y - 10
    });
  };

  GridContainer.prototype.fadeOut = function(obj) {
    TweenMax.killTweensOf(obj);
    TweenLite.killTweensOf(obj);
    return TweenLite.to(obj, 0.5, {
      alpha: 0,
      y: obj.y - 20
    });
  };

  GridContainer.prototype.blink = function(obj, state) {
    var objalpha;
    if (state == null) {
      state = true;
    }
    TweenMax.killTweensOf(obj);
    objalpha = 1;
    if (state) {
      return TweenMax.to(obj, 0.5, {
        alpha: 0.2,
        repeat: -1,
        yoyo: true
      });
    }
  };

  GridContainer.prototype.isComplete = function() {
    var l, len1, ref, target;
    ref = this.targets;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      target = ref[l];
      if (target.complete === false) {
        return false;
      }
    }
    return true;
  };

  return GridContainer;

})(Component);

PhraseCompleterContainer = (function(superClass) {
  extend(PhraseCompleterContainer, superClass);

  PhraseCompleterContainer.prototype = new createjs.Container();

  PhraseCompleterContainer.prototype.Container_initialize = PhraseCompleterContainer.prototype.initialize;

  function PhraseCompleterContainer(opts) {
    this.initialize(opts);
  }

  PhraseCompleterContainer.prototype.initialize = function(opts) {
    var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
    this.Container_initialize();
    Module.extend(this, d2oda.actions);
    Module.extend(this, d2oda.methods);
    this.x = opts.x;
    this.y = opts.y;
    this.margin = (ref = opts.margin) != null ? ref : 10;
    this.font = (ref1 = opts.font) != null ? ref1 : '20px Arial';
    this.fcolor = (ref2 = opts.fcolor) != null ? ref2 : '#333';
    this.bcolor = (ref3 = opts.bcolor) != null ? ref3 : '#FFF';
    this.scolor = (ref4 = opts.scolor) != null ? ref4 : '#333';
    this.stroke = (ref5 = opts.stroke) != null ? ref5 : 3;
    this.name = (ref6 = opts.name) != null ? ref6 : opts.id;
    this.align = (ref7 = opts.align) != null ? ref7 : '';
    this.uwidth = opts.uwidth;
    this.underline = (ref8 = opts.underline) != null ? ref8 : {
      y: 5
    };
    this.clickable = (ref9 = opts.clickable) != null ? ref9 : true;
    this.lineHeight = opts.lineHeight;
    this.currentTarget = 0;
    this.observer = new ComponentObserver();
    this.droptargets = new Array();
    return this.textlist = new Array();
  };

  PhraseCompleterContainer.prototype.hideLabel = function() {
    console.log(this.label);
    if (this.label !== '') {
      return TweenLite.to(lib[this.label], 0.5, {
        alpha: 0
      });
    }
  };

  PhraseCompleterContainer.prototype.update = function(opts) {
    var align, first, h, h2, hopts, i, l, len1, maxWidth, npos, ref, ref1, ref2, ref3, t, txt, ypos;
    this.removeAllChildren();
    this.label = (ref = opts.label) != null ? ref : '';
    if (opts.h2) {
      align = (ref1 = opts.h2.align) != null ? ref1 : '';
      h2 = this.createText('h2', opts.h2.text, this.font, this.color, opts.h2.x, opts.h2.y, align);
      this.add(h2, false);
    }
    if (opts.nextGroup) {
      this.nextGroup = opts.nextGroup;
    }
    i = 0;
    npos = 0;
    ypos = (ref2 = opts.ypos) != null ? ref2 : -5;
    maxWidth = 0;
    ref3 = opts.pattern;
    for (l = 0, len1 = ref3.length; l < len1; l++) {
      t = ref3[l];
      if (t === '#tcpt') {
        txt = opts.targets[i];
        if (this.uwidth) {
          hopts = {
            text: txt.text,
            width: this.uwidth
          };
        } else {
          hopts = txt;
          if (hopts.maxlength) {
            h = this.createText('max', hopts.maxlength, this.font, this.fcolor, 0, 0);
            hopts = {
              text: txt.text,
              width: h.getMeasuredWidth() + this.margin
            };
          }
        }
        hopts.underline = this.underline;
        hopts.clickable = this.clickable;
        h = new TextCompleterContainer(hopts, this.font, this.fcolor, this.bcolor, this.scolor, this.stroke, npos, ypos);
        this.droptargets.push(h);
        this.textlist.push(h);
        this.add(h, false);
        npos += h.width + this.margin;
        if (npos > maxWidth) {
          maxWidth = npos;
        }
        i++;
      } else if (t === '#rtn') {
        if (this.lineHeight) {
          npos = 0;
          ypos += this.lineHeight;
        } else {
          npos = 0;
          if (npos > maxWidth) {
            maxWidth = npos;
          }
          if (this.lineHeight) {
            ypos += this.lineHeight;
          } else {
            h = this.createText('txt', 'BLANK', this.font, this.fcolor, npos, 0);
            ypos += h.getMeasuredHeight() + h.getMeasuredHeight() * 0.2;
          }
        }
      } else {
        first = t.charAt(0);
        if (first === '.' || first === '!' || first === '?' || first === ',') {
          npos -= this.margin;
        }
        h = this.createText('txt', t, this.font, this.fcolor, npos, ypos);
        this.textlist.push(h);
        this.add(h, false);
        npos += h.getMeasuredWidth() + this.margin;
        if (npos > maxWidth) {
          maxWidth = npos;
        }
      }
    }
    this.width = maxWidth;
    this.setPosition(this.align);
    this.observer.notify(ComponentObserver.UPDATED);
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  PhraseCompleterContainer.prototype.clearChildren = function() {
    var l, len1, ref, results, target;
    ref = this.droptargets;
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      target = ref[l];
      results.push(target.clearBackground());
    }
    return results;
  };

  PhraseCompleterContainer.prototype.getEnabledTarget = function() {
    var enabled, l, len1, ref, target;
    enabled = {
      success: false
    };
    ref = this.droptargets;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      target = ref[l];
      if (target.writeEnabled) {
        enabled = target;
      }
    }
    return enabled;
  };

  PhraseCompleterContainer.prototype.isComplete = function() {
    var l, len1, ref, target;
    ref = this.droptargets;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      target = ref[l];
      if (target.complete === false) {
        return false;
      }
    }
    return true;
  };

  return PhraseCompleterContainer;

})(Component);

PhraseCloneContainer = (function(superClass) {
  extend(PhraseCloneContainer, superClass);

  PhraseCloneContainer.prototype = new createjs.Container();

  PhraseCloneContainer.prototype.Container_initialize = PhraseCloneContainer.prototype.initialize;

  function PhraseCloneContainer(opts) {
    this.initialize(opts);
  }

  PhraseCloneContainer.prototype.initialize = function(opts) {
    var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.x = opts.x;
    this.y = opts.y;
    this.margin = (ref = opts.margin) != null ? ref : 10;
    this.font = (ref1 = opts.font) != null ? ref1 : '20px Arial';
    this.fcolor = (ref2 = opts.fcolor) != null ? ref2 : '#333';
    this.bcolor = (ref3 = opts.bcolor) != null ? ref3 : '#FFF';
    this.scolor = (ref4 = opts.scolor) != null ? ref4 : '#333';
    this.stroke = (ref5 = opts.stroke) != null ? ref5 : 3;
    this.name = (ref6 = opts.name) != null ? ref6 : opts.id;
    this.align = (ref7 = opts.align) != null ? ref7 : '';
    this.currentTarget = 0;
    this.observer = new ComponentObserver();
    return this.droptargets = new Array();
  };

  PhraseCloneContainer.prototype.update = function(opts) {
    var align, h, h2, i, l, len1, npos, ref, ref1, t, txt;
    this.removeAllChildren();
    if (opts.h2) {
      align = (ref = opts.h2.align) != null ? ref : '';
      h2 = this.createText('h2', opts.h2.text, this.font, this.color, opts.h2.x, opts.h2.y, align);
      this.add(h2, false);
    }
    i = 0;
    npos = 0;
    ref1 = opts.pattern;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      t = ref1[l];
      if (t === '#tcpt') {
        txt = opts.targets[i];
        h = new TextCloneContainer(txt, this.font, this.fcolor, this.bcolor, this.scolor, this.stroke, npos, -5);
        this.droptargets.push(h);
        this.add(h, false);
        npos += h.width + this.margin;
        i++;
      } else {
        h = this.createText('txt', t, this.font, this.fcolor, npos, -5);
        this.add(h, false);
        npos += h.getMeasuredWidth() + this.margin;
      }
    }
    this.width = npos;
    this.setPosition(this.align);
    this.observer.notify(ComponentObserver.UPDATED);
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  PhraseCloneContainer.prototype.isComplete = function() {
    return true;
  };

  return PhraseCloneContainer;

})(Component);

TextCloneContainer = (function(superClass) {
  extend(TextCloneContainer, superClass);

  TextCloneContainer.prototype = new createjs.Container();

  TextCloneContainer.prototype.Container_initialize = TextCloneContainer.prototype.initialize;

  function TextCloneContainer(opts, font, fcolor, bcolor, scolor, stroke, x, y) {
    this.initialize(opts, font, fcolor, bcolor, scolor, stroke, x, y);
  }

  TextCloneContainer.prototype.initialize = function(opts, font, fcolor, bcolor, scolor, stroke, x, y) {
    var ref, ref1, ref2;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.x = x;
    this.y = y;
    this.success = (ref = opts.success) != null ? ref : opts.text;
    this.text = this.createText('txt', opts.text, font, fcolor, 0, -5);
    this.width = (ref1 = opts.width) != null ? ref1 : this.text.getMeasuredWidth();
    this.height = (ref2 = opts.height) != null ? ref2 : this.text.getMeasuredHeight();
    this.complete = false;
    this.back = new createjs.Shape();
    this.back.graphics.f(bcolor).dr(0, 0, this.width, this.height).ss(stroke).s(scolor).mt(0, this.height).lt(this.width, this.height);
    this.add(this.back, false);
    this.add(this.text, false);
    return this.text.text = '';
  };

  TextCloneContainer.prototype.setRectOutline = function(bcolor, stroke, scolor) {
    return this.back.graphics.f(bcolor).ss(stroke).s(scolor).dr(0, 0, this.width, this.height);
  };

  TextCloneContainer.prototype.showEvaluation = function() {
    if (this.complete) {
      return this.insertBitmap('correct', 'correct', this.width, this.height / 2, 'ml');
    } else {
      return this.insertBitmap('wrong', 'wrong', this.width, this.height / 2, 'ml');
    }
  };

  TextCloneContainer.prototype.update = function(text, complete) {
    if (complete == null) {
      complete = true;
    }
    this.complete = complete;
    this.text.text = text;
    this.text.textAlign = 'center';
    this.text.x = this.width / 2;
    return TweenLite.from(this, 0.3, {
      alpha: 0
    });
  };

  return TextCloneContainer;

})(Component);

WordSearchContainer = (function(superClass) {
  extend(WordSearchContainer, superClass);

  WordSearchContainer.prototype = new createjs.Container();

  WordSearchContainer.prototype.Container_initialize = WordSearchContainer.prototype.initialize;

  function WordSearchContainer(opts) {
    this.initialize(opts);
  }

  WordSearchContainer.prototype.initialize = function(opts) {
    var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.x = opts.x;
    this.y = opts.y;
    this.font = (ref1 = opts.font) != null ? ref1 : '20px Arial';
    this.fcolor = (ref2 = opts.fcolor) != null ? ref2 : '#333';
    this.bcolor = (ref3 = opts.bcolor) != null ? ref3 : '#FFF';
    this.shcolor = (ref4 = opts.shcolor) != null ? ref4 : '#F00';
    this.shape = (ref5 = opts.shape) != null ? ref5 : 'rect';
    this.uwidth = (ref6 = opts.uwidth) != null ? ref6 : 100;
    this.uheight = (ref7 = opts.uheight) != null ? ref7 : 100;
    this.radius = (ref8 = opts.radius) != null ? ref8 : 0;
    this.allComplete = false;
    this.observer = new ComponentObserver();
    this.droptargets = new Array();
    this.path = new Array();
    return this.addEventListener('mousedown', (function(_this) {
      return function(e) {
        _this.path = new Array();
        _this.getLetterContainer();
        _this.addEventListener('pressmove', function(ev) {
          return _this.getLetterContainer();
        });
        _this.addEventListener('pressup', function(ev) {
          var coord, found, foundAWord, key, l, lcoords, len1, len2, ltc, m, n, ref10, ref9, unames, upath, wcoords, word;
          _this.removeAllEventListeners('pressmove');
          _this.removeAllEventListeners('pressup');
          found = false;
          upath = _this.path.unique();
          unames = (function() {
            var l, len1, results;
            results = [];
            for (l = 0, len1 = upath.length; l < len1; l++) {
              coord = upath[l];
              results.push(coord.name);
            }
            return results;
          })();
          unames.sort();
          ref9 = _this.words;
          for (l = 0, len1 = ref9.length; l < len1; l++) {
            word = ref9[l];
            if (word.enabled) {
              lcoords = new Array();
              wcoords = word.coords.sort();
              for (key = m = 0, ref10 = wcoords.length; 0 <= ref10 ? m < ref10 : m > ref10; key = 0 <= ref10 ? ++m : --m) {
                lcoords[key] = "l" + wcoords[key];
              }
              foundAWord = lcoords.compare(unames);
              if (foundAWord) {
                found = true;
                word.complete = true;
                if (word.fx) {
                  lib[word.target][word.fx]();
                } else {
                  lib[word.target].fadeOut();
                }
                lib.scene.success();
              }
            }
          }
          if (!found) {
            for (n = 0, len2 = upath.length; n < len2; n++) {
              ltc = upath[n];
              ltc.showShape(false);
            }
            return lib.scene.fail();
          }
        });
        return false;
      };
    })(this));
  };

  WordSearchContainer.prototype.getLetterContainer = function() {
    var ltc, oup, pt;
    pt = this.globalToLocal(oda.stage.mouseX, oda.stage.mouseY);
    oup = this.getObjectUnderPoint(pt.x, pt.y);
    ltc = oup.parent;
    if (ltc && ltc instanceof LetterContainer) {
      ltc.showShape();
      return this.path.push(ltc);
    }
  };

  WordSearchContainer.prototype.update = function(opts) {
    var column, i, j, l, len1, len2, m, olc, ref, row;
    this.removeAllChildren();
    this.words = opts.words;
    i = 0;
    j = 0;
    ref = opts.matrix;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      row = ref[l];
      for (m = 0, len2 = row.length; m < len2; m++) {
        column = row[m];
        olc = new LetterContainer({
          text: column,
          width: this.uwidth,
          height: this.uheight,
          radius: this.radius
        }, this.font, this.fcolor, this.bcolor, this.shcolor, this.shape, j * this.uwidth, i * this.uheight);
        olc.name = "l" + j + "_" + i;
        this.add(olc);
        this.droptargets.push(olc);
        j++;
      }
      j = 0;
      i++;
    }
    this.observer.notify(ComponentObserver.UPDATED);
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  WordSearchContainer.prototype.isComplete = function() {
    var complete, l, len1, ref, word;
    complete = true;
    ref = this.words;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      word = ref[l];
      if (word.complete === false) {
        complete = false;
      }
    }
    return complete;
  };

  return WordSearchContainer;

})(Component);

CrossWordsContainer = (function(superClass) {
  extend(CrossWordsContainer, superClass);

  CrossWordsContainer.prototype = new createjs.Container();

  CrossWordsContainer.prototype.Container_initialize = CrossWordsContainer.prototype.initialize;

  function CrossWordsContainer(opts) {
    this.initialize(opts);
  }

  CrossWordsContainer.prototype.initialize = function(opts) {
    var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.x = opts.x;
    this.y = opts.y;
    this.font = (ref1 = opts.font) != null ? ref1 : '20px Arial';
    this.fcolor = (ref2 = opts.fcolor) != null ? ref2 : '#333';
    this.bcolor = (ref3 = opts.bcolor) != null ? ref3 : '#FFF';
    this.stroke = (ref4 = opts.stroke) != null ? ref4 : 2;
    this.scolor = (ref5 = opts.scolor) != null ? ref5 : '#FFF';
    this.uwidth = (ref6 = opts.uwidth) != null ? ref6 : 100;
    this.uheight = (ref7 = opts.uheight) != null ? ref7 : 100;
    this.allComplete = false;
    this.observer = new ComponentObserver();
    return this.droptargets = new Array();
  };

  CrossWordsContainer.prototype.update = function(opts) {
    var column, hit, i, j, k, l, len1, len2, m, n, ref, ref1, row, tcc, txt;
    this.removeAllChildren();
    this.words = opts.words;
    for (k = l = 1, ref = this.words.length; 1 <= ref ? l <= ref : l >= ref; k = 1 <= ref ? ++l : --l) {
      txt = this.insertText("txt" + k, "" + k, this.font, this.fcolor, this.words[k - 1].x, this.words[k - 1].y);
      hit = new createjs.Shape();
      hit.graphics.beginFill('#000').drawRect(-5, -3, txt.getMeasuredWidth() + 10, txt.getMeasuredHeight() + 6);
      txt.hitArea = hit;
      if (this.words[k - 1]["eval"]) {
        txt["eval"] = this.words[k - 1]["eval"];
        txt.target = this.words[k - 1].target;
        txt.index = this.words[k - 1].index;
        txt.addEventListener('click', (function(_this) {
          return function(e) {
            return d2oda.evaluator.evaluate(e.target["eval"], e.target.name, e.target.target);
          };
        })(this));
      }
    }
    i = 0;
    j = 0;
    ref1 = opts.matrix;
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      row = ref1[m];
      for (n = 0, len2 = row.length; n < len2; n++) {
        column = row[n];
        if (column !== '#') {
          if (column === '-') {
            tcc = new createjs.Shape();
            tcc.graphics.f('#999').ss(this.stroke).s(this.scolor).dr(0, 0, this.uwidth, this.uheight);
            tcc.x = j * this.uwidth;
            tcc.y = i * this.uheight;
          } else {
            tcc = new TextCompleterContainer({
              text: column,
              width: this.uwidth,
              height: this.uheight
            }, this.font, this.fcolor, this.bcolor, this.scolor, this.stroke, j * this.uwidth, i * this.uheight);
            tcc.name = "l" + j + i;
            tcc.setRectOutline(this.bcolor, this.stroke, this.scolor);
          }
          this.add(tcc);
          this.droptargets.push(tcc);
        }
        j++;
      }
      j = 0;
      i++;
    }
    this.observer.notify(ComponentObserver.UPDATED);
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  CrossWordsContainer.prototype.fadeOut = function(obj) {
    TweenMax.killTweensOf(obj);
    TweenLite.killTweensOf(obj);
    return TweenLite.to(obj, 0.5, {
      alpha: 0,
      y: obj.y - 20
    });
  };

  CrossWordsContainer.prototype.evaluateWords = function() {
    var coords, l, len1, len2, m, obj, ref, results, word, wordComplete;
    ref = this.words;
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      word = ref[l];
      coords = word.coords;
      wordComplete = true;
      for (m = 0, len2 = coords.length; m < len2; m++) {
        obj = coords[m];
        if (!lib["l" + obj].complete) {
          wordComplete = false;
        }
      }
      if (!word.complete) {
        if (wordComplete) {
          word.complete = true;
          if (lib[word.target]) {
            this.fadeOut(lib[word.target]);
          }
          if (lib["number" + word.target]) {
            this.fadeOut(lib["number" + word.target]);
          }
          createjs.Sound.play("s/" + word.target);
          results.push(lib.scene.success());
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  CrossWordsContainer.prototype.isComplete = function() {
    var l, len1, ref, word;
    this.allComplete = true;
    ref = this.words;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      word = ref[l];
      if (!word.complete) {
        this.allComplete = false;
      }
    }
    return this.allComplete;
  };

  return CrossWordsContainer;

})(Component);

ABCContainer = (function(superClass) {
  extend(ABCContainer, superClass);

  ABCContainer.prototype = new createjs.Container();

  ABCContainer.prototype.Container_initialize = ABCContainer.prototype.initialize;

  function ABCContainer(opts) {
    this.initialize(opts);
  }

  ABCContainer.prototype.initialize = function(opts) {
    var _x, _y, abc, abcarr, d, i, l, len1, letter, lopts, ref;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.x = opts.x;
    this.y = opts.y;
    this["eval"] = opts["eval"];
    this.target = opts.target;
    abc = 'abcdefghijklmnopqrstuvwxyz';
    abcarr = abc.split('');
    this.abccollection = new Array();
    i = 0;
    for (l = 0, len1 = abcarr.length; l < len1; l++) {
      letter = abcarr[l];
      if (i >= 13) {
        _x = (i - 13) * (opts.uwidth + opts.margin);
        _y = opts.uheight;
      } else {
        _x = i * (opts.uwidth + opts.margin);
        _y = 0;
      }
      if (opts.clickable) {
        lopts = {
          id: "abc_" + i,
          x: _x,
          y: _y,
          index: letter,
          target: this.target,
          "eval": this["eval"],
          states: [
            {
              txt: {
                text: letter,
                font: opts.font,
                color: opts.fcolor
              }
            }
          ]
        };
        d = new ButtonContainer(lopts);
      } else {
        lopts = {
          id: "abc_" + i,
          x: _x,
          y: _y,
          index: letter,
          target: this.target,
          "eval": this["eval"],
          text: letter,
          font: opts.font,
          color: opts.fcolor,
          afterSuccess: 'origin',
          afterFail: 'return'
        };
        d = new LetterDragContainer(lopts);
      }
      this.abccollection.push(d);
      this.add(d);
      i++;
    }
    this.width = _x + opts.uwidth;
    this.height = _y * 2;
    this.setPosition('mc');
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  ABCContainer.prototype.update = function(opts) {
    var l, len1, letter, ref, results;
    if (opts.reset) {
      ref = this.abccollection;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        letter = ref[l];
        results.push(letter.visible = true);
      }
      return results;
    }
  };

  ABCContainer.prototype.isComplete = function() {
    return true;
  };

  return ABCContainer;

})(Component);

WordCompleterContainer = (function(superClass) {
  extend(WordCompleterContainer, superClass);

  WordCompleterContainer.prototype = new createjs.Container();

  WordCompleterContainer.prototype.Container_initialize = WordCompleterContainer.prototype.initialize;

  function WordCompleterContainer(opts) {
    this.initialize(opts);
  }

  WordCompleterContainer.prototype.initialize = function(opts) {
    var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    Module.extend(this, d2oda.utilities);
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.x = opts.x;
    this.y = opts.y;
    this.uwidth = (ref1 = opts.uwidth) != null ? ref1 : 25;
    this.bcolor = (ref2 = opts.bcolor) != null ? ref2 : '#FFF';
    this.scolor = (ref3 = opts.scolor) != null ? ref3 : '#333';
    this.fcolor = (ref4 = opts.fcolor) != null ? ref4 : '#333';
    this.font = (ref5 = opts.font) != null ? ref5 : '20px Arial';
    this.stroke = (ref6 = opts.stroke) != null ? ref6 : 3;
    this.align = (ref7 = opts.align) != null ? ref7 : '';
    this.margin = (ref8 = opts.margin) != null ? ref8 : 5;
    this["eval"] = opts["eval"];
    this.currentTarget = 0;
    this.observer = new ComponentObserver();
    return this.droptargets = new Array();
  };

  WordCompleterContainer.prototype.update = function(opts) {
    var h, i, l, len1, letter, npos, word;
    this.removeAllChildren();
    this.droptargets = new Array();
    this.target = opts.target;
    word = opts.word.split('');
    i = 0;
    if (opts.prev) {
      this.prev = this.insertText('prevTxt', opts.prev, this.font, this.fcolor, 0, 0);
      npos = this.prev.getMeasuredWidth() + this.margin;
    } else {
      npos = 0;
    }
    for (l = 0, len1 = word.length; l < len1; l++) {
      letter = word[l];
      if (letter === ' ') {
        npos += this.margin * 2;
      } else {
        opts = {
          text: letter,
          width: this.uwidth
        };
        h = new TextCompleterContainer(opts, this.font, this.fcolor, this.bcolor, this.scolor, this.stroke, npos, 5);
        this.droptargets.push(h);
        this.add(h, false);
        npos += this.uwidth + this.margin;
      }
      i++;
    }
    this.width = npos;
    this.setPosition(this.align);
    i = 0;
    npos = this.prev ? this.prev.getMeasuredWidth() + this.margin : 0;
    this.observer.notify(ComponentObserver.UPDATED);
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  WordCompleterContainer.prototype.isComplete = function() {
    var l, len1, ref, target;
    ref = this.droptargets;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      target = ref[l];
      if (target.complete === false) {
        return false;
      }
    }
    return true;
  };

  return WordCompleterContainer;

})(Component);

ScrambledWordContainer = (function(superClass) {
  extend(ScrambledWordContainer, superClass);

  ScrambledWordContainer.prototype = new createjs.Container();

  ScrambledWordContainer.prototype.Container_initialize = ScrambledWordContainer.prototype.initialize;

  function ScrambledWordContainer(opts) {
    this.initialize(opts);
  }

  ScrambledWordContainer.prototype.initialize = function(opts) {
    var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    Module.extend(this, d2oda.actions);
    Module.extend(this, d2oda.utilities);
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.x = opts.x;
    this.y = opts.y;
    this.uwidth = (ref1 = opts.uwidth) != null ? ref1 : 25;
    this.bcolor = (ref2 = opts.bcolor) != null ? ref2 : '#FFF';
    this.scolor = (ref3 = opts.scolor) != null ? ref3 : '#333';
    this.fcolor = (ref4 = opts.fcolor) != null ? ref4 : '#333';
    this.font = (ref5 = opts.font) != null ? ref5 : '20px Arial';
    this.stroke = (ref6 = opts.stroke) != null ? ref6 : 3;
    this.align = (ref7 = opts.align) != null ? ref7 : '';
    this.margin = (ref8 = opts.margin) != null ? ref8 : 5;
    this.oncomplete = (ref9 = opts.oncomplete) != null ? ref9 : null;
    this["eval"] = opts["eval"];
    this.currentTarget = 0;
    this.observer = new ComponentObserver();
    return this.droptargets = new Array();
  };

  ScrambledWordContainer.prototype.update = function(opts) {
    var d, h, i, l, len1, len2, letter, m, npos, ref, s, scrambledLetter, scrambledWord, word;
    this.removeAllChildren();
    this.target = opts.target;
    this.fx = (ref = opts.fx) != null ? ref : 'fadeOut';
    word = opts.word.split('');
    scrambledWord = this.shuffle(word);
    i = 0;
    if (opts.prev) {
      this.prev = this.insertText('prevTxt', opts.prev, this.font, this.fcolor, 0, 0);
      npos = this.prev.getMeasuredWidth() + this.margin;
    } else {
      npos = 0;
    }
    for (l = 0, len1 = word.length; l < len1; l++) {
      letter = word[l];
      if (letter === ' ') {
        npos += this.margin;
      } else {
        opts = {
          text: letter,
          width: this.uwidth
        };
        h = new TextCompleterContainer(opts, this.font, this.fcolor, this.bcolor, this.scolor, this.stroke, npos, 5);
        this.droptargets.push(h);
        this.add(h, false);
        npos += this.uwidth + this.margin;
      }
      i++;
    }
    s = this.insertText("period", '.', this.font, this.fcolor, h.x + h.width + 3, 10, 'center');
    this.width = npos;
    this.setPosition(this.align);
    i = 0;
    npos = this.prev ? this.prev.getMeasuredWidth() + this.margin : 0;
    for (m = 0, len2 = scrambledWord.length; m < len2; m++) {
      scrambledLetter = scrambledWord[m];
      if (scrambledLetter !== ' ') {
        opts = {
          id: "l" + this.name + i,
          x: npos,
          y: -h.height,
          index: scrambledLetter,
          target: this.name,
          "eval": this["eval"],
          text: scrambledLetter,
          font: this.font,
          color: this.fcolor,
          afterSuccess: 'hide',
          afterFail: 'return'
        };
        d = new LetterDragContainer(opts);
        this.add(d);
        npos += this.uwidth + this.margin;
        i++;
      }
    }
    this.observer.notify(ComponentObserver.UPDATED);
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  ScrambledWordContainer.prototype.onComplete = function() {
    return d2oda.evaluator.evaluate(this.oncomplete["function"], this.name, this.oncomplete.target);
  };

  ScrambledWordContainer.prototype.isComplete = function() {
    var l, len1, ref, target;
    ref = this.droptargets;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      target = ref[l];
      if (target.complete === false) {
        return false;
      }
    }
    return true;
  };

  return ScrambledWordContainer;

})(Component);

TextCompleterContainer = (function(superClass) {
  extend(TextCompleterContainer, superClass);

  TextCompleterContainer.prototype = new createjs.Container();

  TextCompleterContainer.prototype.Container_initialize = TextCompleterContainer.prototype.initialize;

  function TextCompleterContainer(opts, font, fcolor, bcolor, scolor, stroke, x, y) {
    this.initialize(opts, font, fcolor, bcolor, scolor, stroke, x, y);
  }

  TextCompleterContainer.prototype.initialize = function(opts, font, fcolor, bcolor, scolor, stroke, x, y) {
    var ref, ref1, ref2, ref3, ref4;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.x = x;
    this.y = y;
    this.success = (ref = opts.success) != null ? ref : opts.text;
    this.text = this.createText('txt', opts.text, font, fcolor, 0, -2);
    this.width = (ref1 = opts.width) != null ? ref1 : this.text.getMeasuredWidth();
    this.height = (ref2 = opts.height) != null ? ref2 : this.text.getMeasuredHeight();
    this.complete = false;
    this.back = new createjs.Shape();
    this.bcolor = bcolor != null ? bcolor : '#FFF';
    this.stroke = stroke != null ? stroke : 1;
    this.scolor = scolor != null ? scolor : '#333';
    this.clickable = (ref3 = opts.clickable) != null ? ref3 : true;
    this.underline = (ref4 = opts.underline) != null ? ref4 : false;
    this.word = '';
    console.log(this.underline);
    if (this.underline) {
      this.back.graphics.f(this.bcolor).dr(0, this.underline.y, this.width, this.height + this.underline.y).ss(this.stroke).s(this.scolor).mt(0, this.height + this.underline.y).lt(this.width, this.height + this.underline.y);
    } else {
      this.back.graphics.f(bcolor).dr(0, 5, this.width, this.height + 5).ss(stroke).s(scolor).mt(0, this.height + 5).lt(this.width, this.height + 5);
    }
    this.add(this.back, false);
    if (this.clickable) {
      return this.addEventListener('click', (function(_this) {
        return function() {
          if (dealersjs.mobile.isAndroid() || dealersjs.mobile.isIOS()) {
            modal.show();
          }
          if (_this.parent) {
            _this.parent.clearChildren();
          }
          _this.writeEnabled = true;
          if (opts.underline) {
            return _this.back.graphics.c().f(_this.hexToRGB(_this.bcolor, 0.2)).dr(0, opts.underline.y, _this.width, _this.height + opts.underline.y).ss(_this.stroke).s(_this.scolor).mt(0, _this.height + opts.underline.y).lt(_this.width, _this.height + opts.underline.y);
          } else {
            return _this.back.graphics.c().f(_this.hexToRGB(_this.bcolor, 0.2)).dr(0, 0, _this.width, _this.height).ss(_this.stroke).s(_this.scolor).mt(0, _this.height + 5).lt(_this.width, _this.height + 5);
          }
        };
      })(this));
    }
  };

  TextCompleterContainer.prototype.hexToRGB = function(hex, alpha) {
    var b, g, h, r;
    hex = hex === '#FFF' || hex === '#FFFFFF' ? '#F00' : hex;
    h = "0123456789ABCDEF";
    r = h.indexOf(hex[1]) * 16 + h.indexOf(hex[2]);
    g = h.indexOf(hex[3]) * 16 + h.indexOf(hex[4]);
    b = h.indexOf(hex[5]) * 16 + h.indexOf(hex[6]);
    if (alpha) {
      return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
    } else {
      return "rgb(" + r + ", " + g + ", " + b + ")";
    }
  };

  TextCompleterContainer.prototype.clearBackground = function() {
    this.writeEnabled = false;
    if (this.underline) {
      return this.back.graphics.c().f(this.bcolor).dr(0, this.underline.y, this.width, this.height + this.underline.y).ss(this.stroke).s(this.scolor).mt(0, this.height + this.underline.y).lt(this.width, this.height + this.underline.y);
    } else {
      return this.back.graphics.c().f(this.bcolor).dr(0, 5, this.width, this.height).ss(this.stroke).s(this.scolor).mt(0, this.height + 5).lt(this.width, this.height + 5);
    }
  };

  TextCompleterContainer.prototype.write = function(char) {
    if (!char) {
      return this.word;
    }
    if (!this.text.parent) {
      this.text.textAlign = 'center';
      this.text.x = this.width / 2;
      this.add(this.text, false);
    }
    if (char === '<-') {
      this.word = this.word.slice(0, this.word.length - 1);
    } else if (char === '-') {
      this.word += ' ';
    } else {
      this.word += char;
    }
    return this.text.text = this.word;
  };

  TextCompleterContainer.prototype.writeText = function(txt) {
    if (!this.text.parent) {
      this.text.textAlign = 'center';
      this.text.x = this.width / 2;
      this.add(this.text, false);
    }
    this.word = txt;
    return this.text.text = txt;
  };

  TextCompleterContainer.prototype.setRectOutline = function(bcolor, stroke, scolor) {
    return this.back.graphics.f(bcolor).ss(stroke).s(scolor).dr(0, 0, this.width, this.height + 5);
  };

  TextCompleterContainer.prototype.update = function(opts) {
    if (opts && opts.complete) {
      this.complete = opts.complete;
    }
    this.text.textAlign = 'center';
    this.text.x = this.width / 2;
    this.add(this.text, false);
    return TweenLite.from(this, 0.3, {
      alpha: 0
    });
  };

  return TextCompleterContainer;

})(Component);

LetterContainer = (function(superClass) {
  extend(LetterContainer, superClass);

  LetterContainer.prototype = new createjs.Container();

  LetterContainer.prototype.Container_initialize = LetterContainer.prototype.initialize;

  function LetterContainer(opts, font, fcolor, bcolor, shcolor, shape, x, y) {
    this.initialize(opts, font, fcolor, bcolor, shcolor, shape, x, y);
  }

  LetterContainer.prototype.initialize = function(opts, font, fcolor, bcolor, shcolor, shape, x, y) {
    var ref, ref1, ref2;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    Module.extend(this, d2oda.actions);
    Module.extend(this, d2oda.utilities);
    this.mouseChildren = false;
    this.x = x;
    this.y = y;
    this.name = (ref = "ltc_" + opts.name) != null ? ref : "ltc_" + opts.text;
    this.success = (ref1 = opts.success) != null ? ref1 : opts.text;
    this.text = this.createText('txt', opts.text, font, fcolor, opts.width / 2, opts.height / 2 - 15, 'center');
    this.width = opts.width;
    this.height = opts.height;
    this.radius = (ref2 = opts.radius) != null ? ref2 : '20';
    this.complete = false;
    this.selectionEnabled = false;
    this.back = new createjs.Shape();
    this.shape = new createjs.Shape();
    this.back.graphics.f(bcolor).dr(0, 0, this.width, this.height);
    switch (shape) {
      case 'rect':
        this.shape.graphics.f(shcolor).dr(0, 0, this.width, this.height);
        break;
      case 'round':
        this.shape.graphics.f(shcolor).rr(0, 0, this.width, this.height, this.radius);
        break;
      case 'circle':
        this.shape.graphics.f(shcolor).dc(this.width / 2, this.height / 2, this.radius);
    }
    this.add(this.back, false);
    this.add(this.shape, false);
    this.add(this.text, false);
    return this.shape.visible = false;
  };

  LetterContainer.prototype.showShape = function(visible) {
    if (visible == null) {
      visible = true;
    }
    return this.shape.visible = visible;
  };

  LetterContainer.prototype.update = function(opts) {
    return this.complete = true;
  };

  return LetterContainer;

})(Component);

LetterDragContainer = (function(superClass) {
  extend(LetterDragContainer, superClass);

  LetterDragContainer.prototype = new createjs.Container();

  LetterDragContainer.prototype.Container_initialize = LetterDragContainer.prototype.initialize;

  function LetterDragContainer(opts) {
    this.handleMouseDown = bind(this.handleMouseDown, this);
    this.update = bind(this.update, this);
    this.initialize(opts);
  }

  LetterDragContainer.prototype.initialize = function(opts) {
    var hit, l, len1, ref, ref1, t;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    Module.extend(this, d2oda.actions);
    Module.extend(this, d2oda.utilities);
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.x = opts.x;
    this.y = opts.y;
    this.pos = {
      x: this.x,
      y: this.y
    };
    this.index = opts.index;
    if (this.isArray(opts.target)) {
      this.target = opts.target;
    } else {
      this.target = lib[opts.target];
    }
    this.droptargets = new Array();
    this["eval"] = opts["eval"];
    this.label = this.createText('txt', opts.text, opts.font, opts.color, 0, 0);
    this.width = this.label.getMeasuredWidth();
    this.height = this.label.getMeasuredHeight();
    switch (opts.afterSuccess) {
      case 'hide':
        this.afterSuccess = this.hide;
        break;
      case 'inplace':
        this.afterSuccess = this.putInPlace;
        break;
      case 'return':
        this.afterSuccess = this.returnToPlace;
        break;
      case 'origin':
        this.afterSuccess = this.setInOrigin;
    }
    switch (opts.afterFail) {
      case 'hide':
        this.afterFail = this.hide;
        break;
      case 'inplace':
        this.afterFail = this.putInPlace;
        break;
      case 'return':
        this.afterFail = this.returnToPlace;
        break;
      case 'origin':
        this.afterFail = this.setInOrigin;
    }
    hit = new createjs.Shape();
    hit.graphics.beginFill('#000').drawRect(-5, -3, this.label.getMeasuredWidth() + 10, this.label.getMeasuredHeight() + 6);
    this.label.hitArea = hit;
    this.add(this.label, false);
    if (this.target) {
      if (this.isArray(this.target)) {
        ref1 = this.target;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          t = ref1[l];
          lib[t].observer.subscribe(ComponentObserver.UPDATED, this.update);
        }
      } else {
        this.target.observer.subscribe(ComponentObserver.UPDATED, this.update);
      }
    }
    return this.addEventListener('mousedown', this.handleMouseDown);
  };

  LetterDragContainer.prototype.update = function(opts) {
    var alldrops, l, len1, ref, t;
    if (this.isArray(this.target)) {
      alldrops = new Array();
      ref = this.target;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        t = ref[l];
        alldrops.merge(lib[t].droptargets);
      }
      return this.droptargets = alldrops;
    } else {
      return this.droptargets = this.target.droptargets;
    }
  };

  LetterDragContainer.prototype.handleMouseDown = function(e) {
    var offset, posX, posY;
    posX = e.stageX / d2oda.stage.r;
    posY = e.stageY / d2oda.stage.r;
    offset = {
      x: posX - this.x,
      y: posY - this.y
    };
    this.x = posX - offset.x;
    this.y = posY - offset.y;
    this.addEventListener('pressmove', (function(_this) {
      return function(ev) {
        posX = ev.stageX / d2oda.stage.r;
        posY = ev.stageY / d2oda.stage.r;
        _this.x = posX - offset.x;
        _this.y = posY - offset.y;
        return false;
      };
    })(this));
    this.addEventListener('pressup', (function(_this) {
      return function(ev) {
        _this.removeAllEventListeners('pressmove');
        _this.removeAllEventListeners('pressup');
        if (_this.droptargets && _this.droptargets.length > 0) {
          _this.evaluateDrop(e);
        } else {
          _this.dispatchEvent({
            type: 'drop'
          });
        }
        return false;
      };
    })(this));
    return false;
  };

  LetterDragContainer.prototype.evaluateDrop = function(e) {
    var drop, dropped, l, len1, pt, ref, target;
    target = null;
    dropped = false;
    ref = this.droptargets;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      drop = ref[l];
      pt = drop.globalToLocal(oda.stage.mouseX, oda.stage.mouseY);
      if (drop.hitTest(pt.x, pt.y)) {
        target = drop;
        dropped = true;
      }
    }
    if (dropped) {
      d2oda.evaluator.evaluate(this["eval"], this.name, target);
      return this.dispatchEvent({
        type: 'dropped',
        drop: target
      });
    } else {
      return this.returnToPlace(this.alpha, this.scaleX, this.scaleY);
    }
  };

  return LetterDragContainer;

})(Component);

ImageWordCompleterContainer = (function(superClass) {
  extend(ImageWordCompleterContainer, superClass);

  ImageWordCompleterContainer.prototype = new createjs.Container();

  ImageWordCompleterContainer.prototype.Container_initialize = ImageWordCompleterContainer.prototype.initialize;

  function ImageWordCompleterContainer(opts) {
    this.initialize(opts);
  }

  ImageWordCompleterContainer.prototype.initialize = function(opts) {
    var ref, ref1;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.x = opts.x;
    this.y = opts.y;
    this.margin = opts.margin;
    this.uwidth = opts.uwidth;
    this.uheight = opts.uheight;
    this.bcolor = opts.bcolor;
    this.scolor = opts.scolor;
    this.stroke = opts.stroke;
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.align = (ref1 = opts.align) != null ? ref1 : '';
    this.observer = new ComponentObserver();
    return this.droptargets = new Array();
  };

  ImageWordCompleterContainer.prototype.update = function(opts) {
    var child, container, i, l, len1, npos, ref;
    this.removeAllChildren();
    i = 0;
    ref = opts.containers;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      child = ref[l];
      npos = i * (this.uwidth + this.margin);
      container = new ImageCompleterContainer(child, npos, this.uwidth, this.uheight, this.bcolor, this.scolor, this.stroke);
      this.droptargets.push(container);
      this.add(container, false);
      i++;
    }
    this.width = (this.uwidth + this.margin) * (i - 1);
    switch (this.align) {
      case 'center':
        this.regX = this.width / 2;
    }
    this.observer.notify(ComponentObserver.UPDATED);
    return TweenLite.from(this, 0.3, {
      alpha: 0,
      y: this.y - 10
    });
  };

  ImageWordCompleterContainer.prototype.isComplete = function() {
    var l, len1, ref, target;
    ref = this.droptargets;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      target = ref[l];
      if (target.complete === false) {
        return false;
      }
    }
    return true;
  };

  return ImageWordCompleterContainer;

})(Component);

ImageCompleterContainer = (function(superClass) {
  extend(ImageCompleterContainer, superClass);

  ImageCompleterContainer.prototype = new createjs.Container();

  ImageCompleterContainer.prototype.Container_initialize = ImageCompleterContainer.prototype.initialize;

  function ImageCompleterContainer(opts, x, width, height, bgcolor, stcolor, stsize) {
    this.initialize(opts, x, width, height, bgcolor, stcolor, stsize);
  }

  ImageCompleterContainer.prototype.initialize = function(opts, x, width, height, bgcolor, stcolor, stsize) {
    var back, ref;
    if (x == null) {
      x = 0;
    }
    if (width == null) {
      width = 100;
    }
    if (height == null) {
      height = 100;
    }
    if (bgcolor == null) {
      bgcolor = '#FFF';
    }
    if (stcolor == null) {
      stcolor = '#333';
    }
    if (stsize == null) {
      stsize = 3;
    }
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.x = x;
    this.success = opts.success;
    this.image = opts.img;
    this.name = (ref = opts.name) != null ? ref : opts.id;
    this.width = width;
    this.height = height;
    this.complete = false;
    back = new createjs.Shape();
    back.graphics.f(bgcolor).dr(0, 0, width, height).ss(stsize).s(stcolor).mt(0, height).lt(width, height);
    return this.add(back, false);
  };

  ImageCompleterContainer.prototype.update = function(opts) {
    var b;
    b = this.createBitmap(this.image, this.image, 0, -5);
    if (b.width > b.height) {
      b.scaleX = b.scaleY = this.width / b.width;
    } else {
      b.scaleX = b.scaleY = this.height / b.height;
    }
    this.add(b, false);
    this.hitTester = b.hitTester;
    return TweenLite.from(this, 0.3, {
      alpha: 0
    });
  };

  return ImageCompleterContainer;

})(Component);

SceneStack = (function(superClass) {
  extend(SceneStack, superClass);

  SceneStack.prototype = new createjs.Container();

  SceneStack.prototype.Container_initialize = SceneStack.prototype.initialize;

  function SceneStack(scenes) {
    this.lastScene = bind(this.lastScene, this);
    this.prev = bind(this.prev, this);
    this.next = bind(this.next, this);
    this.initialize(scenes);
  }

  SceneStack.prototype.initialize = function(scenes) {
    var l, len1, s, scene;
    this.Container_initialize();
    this.stack = [];
    this.currentScene = 0;
    for (l = 0, len1 = scenes.length; l < len1; l++) {
      s = scenes[l];
      scene = new Scene(s);
      scene.visible = false;
      this.addChild(scene);
      this.stack.push(scene);
    }
    this.setCurrent();
    return TweenLite.from(this, 1, {
      alpha: 0
    });
  };

  SceneStack.prototype.next = function() {
    if (this.stack[this.currentScene].chooseEnabled) {
      this.stack[this.currentScene].visible = false;
      this.currentScene = this.stack[this.currentScene].choose;
    } else {
      this.currentScene++;
    }
    if (this.stack.length > 1 && this.currentScene < this.stack.length) {
      if (!this.stack[this.currentScene].chooseEnabled) {
        this.stack[this.currentScene - 1].visible = false;
      }
      this.setCurrent();
      lib.scene.init();
      return TweenLite.from(this, 1, {
        alpha: 0
      });
    } else {
      return TweenLite.to(this, 1, {
        alpha: 0,
        delay: 1,
        onComplete: this.lastScene
      });
    }
  };

  SceneStack.prototype.prev = function() {
    this.currentScene--;
    if (this.currentScene >= 0) {
      this.stack[this.currentScene + 1].visible = false;
      this.setCurrent();
      lib.scene.init();
      return TweenLite.from(this, 1, {
        alpha: 0
      });
    } else {
      return this.currentScene++;
    }
  };

  SceneStack.prototype.lastScene = function() {
    if (lib.score.type === 'clock') {
      lib.score.stop();
    }
    return this.dispatchEvent({
      type: 'complete'
    });
  };

  SceneStack.prototype.setCurrent = function() {
    lib.scene = this.stack[this.currentScene];
    return lib.scene.visible = true;
  };

  window.SceneStack = SceneStack;

  return SceneStack;

})(Component);

SceneFactory = (function() {
  function SceneFactory() {}

  SceneFactory.prototype.makeChild = function(opts) {
    switch (opts.type) {
      case 'abc':
        return new ABCContainer(opts);
      case 'drg':
        return new DragContainer(opts);
      case 'grd':
        return new GridContainer(opts);
      case 'txt':
        return new TextContainer(opts);
      case 'img':
        return new ImageContainer(opts);
      case 'lbl':
        return new LabelContainer(opts);
      case 'cln':
        return new CloneContainer(opts);
      case 'wrt':
        return new WriteContainer(opts);
      case 'spr':
        return new SpriteContainer(opts);
      case 'btn':
        return new ButtonContainer(opts);
      case 'stps':
        return new StepsContainer(opts);
      case 'chs':
        return new ChooseContainer(opts);
      case 'cwd':
        return new CrossWordsContainer(opts);
      case 'wsch':
        return new WordSearchContainer(opts);
      case 'ldrg':
        return new LetterDragContainer(opts);
      case 'pcct':
        return new PhraseCloneContainer(opts);
      case 'wcpt':
        return new WordCompleterContainer(opts);
      case 'swct':
        return new ScrambledWordContainer(opts);
      case 'ccpt':
        return new CloneCompleterContainer(opts);
      case 'pcpt':
        return new PhraseCompleterContainer(opts);
      case 'iwcpt':
        return new ImageWordCompleterContainer(opts);
      case 'grp':
        return new ComponentGroup(opts);
    }
  };

  window.SceneFactory = SceneFactory;

  return SceneFactory;

})();

SceneObserver = (function(superClass) {
  extend(SceneObserver, superClass);

  function SceneObserver() {
    return SceneObserver.__super__.constructor.apply(this, arguments);
  }

  SceneObserver.NEXT_STEP = 'next_step';

  SceneObserver.COMPLETE = 'scene_complete';

  window.SceneObserver = SceneObserver;

  return SceneObserver;

})(Observer);

Scene = (function(superClass) {
  extend(Scene, superClass);

  Scene.prototype = new createjs.Container();

  Scene.prototype.Container_initialize = Scene.prototype.initialize;

  function Scene(scene) {
    this.setStep = bind(this.setStep, this);
    this.next = bind(this.next, this);
    this.sndsuccess = bind(this.sndsuccess, this);
    this.initialize(scene);
  }

  Scene.prototype.initialize = function(scene) {
    var answers, c, container, g, group, l, len1, len2, m, ref, ref1, ref2, results;
    this.Container_initialize();
    Module.extend(this, d2oda.methods);
    this.factory = new SceneFactory();
    this.observer = new SceneObserver();
    this.currentStep = 0;
    this.choose = (ref = scene.answers.choose) != null ? ref : 0;
    answers = scene.answers.collection.slice(0);
    if (scene.answers.mixed === true) {
      this.answers = d2oda.utilities.shuffle(answers);
    } else {
      this.answers = answers;
    }
    this.chooseEnabled = scene.answers.chooseEnabled;
    switch (scene.answers.type) {
      case 'steps':
        this.observer.subscribe(SceneObserver.NEXT_STEP, this.next);
        break;
      case 'limit':
        this.answers = d2oda.utilities.shuffleNoRepeat(this.answers, scene.answers.limit);
        this.observer.subscribe(SceneObserver.NEXT_STEP, this.next);
    }
    if (scene.containers.length > 0) {
      ref1 = scene.containers;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        container = ref1[l];
        c = this.factory.makeChild(container);
        this.add(c);
      }
    }
    if (scene.groups.length > 0) {
      ref2 = scene.groups;
      results = [];
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        group = ref2[m];
        g = this.factory.makeChild(group);
        results.push(lib[group.id] = g);
      }
      return results;
    }
  };

  Scene.prototype.init = function() {
    if (lib.score.type === 'clock') {
      lib.score.start();
      lib.score.addEventListener('count_complete', lib.game.nextScene);
    }
    return this.setStep();
  };

  Scene.prototype.success = function(plusOne, stopSound) {
    var l, len1, step, target;
    if (plusOne == null) {
      plusOne = true;
    }
    if (stopSound == null) {
      stopSound = true;
    }
    if (stopSound) {
      createjs.Sound.stop();
    }
    if (plusOne) {
      lib.score.plusOne();
    }
    step = this.answers[this.currentStep];
    if (step && step.length > 0) {
      for (l = 0, len1 = step.length; l < len1; l++) {
        target = step[l];
        if (target.name !== 'snd' && target.name !== 'global' && lib[target.name].isComplete() === false) {
          return false;
        }
      }
    }
    return this.nextStep();
  };

  Scene.prototype.sndsuccess = function() {
    return this.success(false);
  };

  Scene.prototype.fail = function() {
    lib.score.enableBlock();
    return lib.mainContainer.warning();
  };

  Scene.prototype.next = function() {
    this.currentStep++;
    if (this.currentStep >= this.answers.length) {
      return this.delay(1000, function() {
        return lib.game.observer.notify(GameObserver.NEXT_SCENE);
      });
    } else {
      return this.delay(1000, this.setStep);
    }
  };

  Scene.prototype.setStep = function() {
    var l, len1, results, snd, step, target;
    if (lib.instructions.playing) {
      console.log('instructions playing');
      return lib.instructions.addEventListener('complete', this.setStep);
    } else {
      step = this.answers[this.currentStep];
      if (step && step.length > 0) {
        results = [];
        for (l = 0, len1 = step.length; l < len1; l++) {
          target = step[l];
          switch (target.name) {
            case 'total':
              d2oda.evaluator.total = target.opts.total;
              results.push(d2oda.evaluator.total_index = 0);
              break;
            case 'global':
              d2oda.evaluator.success = target.opts.success;
              results.push(false);
              break;
            case 'snd':
              this.snd = target.opts.id;
              createjs.Sound.stop();
              snd = createjs.Sound.play(target.opts.id);
              if (target.opts.successoncomplete) {
                snd.addEventListener('complete', this.sndsuccess);
              }
              results.push(false);
              break;
            case 'window':
              this.window = window;
              if (target.opts.keydown) {
                this.window.target = target.opts.target;
                this.window.onkeyup = target.opts.keydown;
                results.push(this.window.onkeydown = function(e) {
                  if (!dealersjs.mobile.isAndroid() && !dealersjs.mobile.isIOS()) {
                    e.preventDefault();
                    return e.stopPropagation();
                  }
                });
              } else {
                results.push(void 0);
              }
              break;
            default:
              results.push(lib[target.name].update(target.opts));
          }
        }
        return results;
      }
    }
  };

  Scene.prototype.nextStep = function() {
    console.log('next step');
    return this.observer.notify(SceneObserver.NEXT_STEP);
  };

  window.Scene = Scene;

  return Scene;

})(Component);
